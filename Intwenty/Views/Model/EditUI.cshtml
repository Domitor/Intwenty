

@{
    ViewData["Title"] = "Edit application";
}

@await Html.PartialAsync("_Modals")

<style>
    .formpanel {
        border: 1px dotted black;
        margin: 5px;
        padding: 5px;
        min-height: 120px;
    }

    .settingpnl {
        border: 1px dotted black;
        margin-left: 5px;
        margin-top: 10px;
        margin-right: 30px;
        padding: 15px;
    }

    .uipnl {
        margin-top: 10px;
    }
</style>



<div id="app">

    <br />
    <br />

    <div class="card">
        <div class="card-header"><h2>UI model designer </h2></div>
        <div class="card-body">Design the '{{model.designerTitle}}' for application {{model.applicationTitle}} and connect it to the database model.</div>
    </div>

    <br />
    <a asp-action="GetList" asp-controller="Model" role="button" class="btn btn-sm btn-default"><span class="fa fa-backward"></span> Back to list</a>
    <br />
    <br />
   
    <div id="uidesigner" v-if="model.viewType!='LIVIEW'">


        <div class="row">
            <div class="col-lg-3" v-if="model.showComponents">

            </div>
            <div v-bind:class="componentDesignerClass()">
                <div class="btn btn-secondary btn-sm" v-on:click="model.showComponents=!model.showComponents">
                    <i class="fas fa-align-justify"></i> Show UI Controls
                </div>
                <div class="btn btn-sm btn-secondary" v-on:click="addSection">
                    <i class="fa fa-plus"></i> Add section
                </div>
                <div class="btn btn-sm btn-primary" v-on:click="SaveApplicationUI" style="float:right">
                    <i class="fa fa-save"></i> Save changes
                </div>
                <hr />
            </div>
        </div>
        <div class="row">
            <div class="col-lg-3" v-if="model.showComponents">

                <nav class="navbar bg-light">
                    <ul class="navbar-nav">
                        <li class="nav-item" v-for="comp in model.uiControls">
                            <a class="nav-link" href="#" v-bind:id="comp.code" draggable="true" v-on:dragstart="dragUI(event)">{{comp.title}}</a>
                        </li>
                    </ul>
                </nav>
            </div>

            <div v-bind:class="componentDesignerClass()">

                <div>

                    <div class="row" v-for="sect in model.sections" v-if="!sect.isRemoved">

                        <div class="col-lg-12">

                            <div class="accordion" v-bind:id="'accordion_'+sect.rowOrder">
                                <div class="card">
                                    <div class="card-header">
                                        <div class="form-inline">
                                            <span class="fa fa-trash" v-on:click="removeSection(sect)" style="margin:10px; cursor:pointer" title="Delete"></span>
                                            <input type="text" class="form-control form-control-sm" v-model="sect.title" style="width:200px; margin:5px" />
                                            <button class="btn btn-sm btn-secondary" type="button" data-toggle="collapse" v-bind:data-target="'#colapse'+sect.rowOrder" style="margin:5px"><span class="fa fa-expand-alt"></span></button>
                                            <span v-if="sect.collapsible" style="margin:10px">Start expanded <input type="checkbox" v-model="sect.startExpanded" /></span>
                                            <span style="margin:10px">Collapsible <input type="checkbox" v-model="sect.collapsible" /> </span>

                                        </div>
                                    </div>

                                    <div v-bind:id="'colapse'+sect.rowOrder" class="collapse show" v-bind:data-parent="'#accordion_'+sect.rowOrder">
                                        <div class="card-body">

                                            <label><b>Choose Layout </b></label>
                                            <input v-bind:id="'pnlcnt_1_'+sect.rowOrder" type="radio" v-bind:name="'panelcntname_'+sect.rowOrder" v-model.number="sect.layoutPanelCount" value="1" v-on:change="layoutClassChanged(sect)" /> 1 Panel
                                            <input v-bind:id="'pnlcnt_2_'+sect.rowOrder" type="radio" v-bind:name="'panelcntname_'+sect.rowOrder" v-model.number="sect.layoutPanelCount" value="2" v-on:change="layoutClassChanged(sect)" /> 2 Panel
                                            <input v-bind:id="'pnlcnt_3_'+sect.rowOrder" type="radio" v-bind:name="'panelcntname_'+sect.rowOrder" v-model.number="sect.layoutPanelCount" value="3" v-on:change="layoutClassChanged(sect)" /> 3 Panel



                                            <div class="row">
                                                <div v-bind:class="layoutClass(sect)" v-for="pnl in sect.layoutPanels" v-if="!pnl.isRemoved">
                                                    <div class="form-group">
                                                        <label class="control-label">Panel Title (Optional)</label>
                                                        <input type="text" class="form-control form-control-sm" v-model="pnl.title" />
                                                    </div>
                                                </div>
                                            </div>




                                            <div class="row" v-for="lrow in sect.layoutRows">

                                                <div v-bind:class="layoutClass(sect)" v-for="pnl in sect.layoutPanels" v-if="!pnl.isRemoved">

                                                    <div class="formpanel" v-for="input in lrow.userInputs" v-if="input.parentMetaCode===pnl.metaCode && !pnl.isRemoved && !input.isRemoved">

                                                        <div v-if="input.metaType==''" style="text-align:center; margin-top:40px">

                                                          
                                                            <div class="p-12 bg-gray-30 border border-gray-90" v-on:drop="dropUI(event, input)" v-on:dragover="allowDropUI(event)">
                                                                <label class="block cursor-pointer">
                                                                    <i>Drop component here.</i>
                                                                </label>
                                                            </div>
                                                        </div>



                                                        <div v-bind:id="'uipnl_' + input.id" class="uipnl" v-if="input.metaType!=''">

                                                            <span class="fa fa-trash" v-on:click="removeUserInput(input)" style="margin:5px; cursor:pointer" title="Remove"></span>
                                                            <span class="fa fa-cog" v-on:click="openSettingsDlg(input)" style="margin:5px; cursor:pointer" title="Settings"></span>
                                                            <label class="control-label"><i>{{input.title}}</i></label>

                                                            <div v-if="input.metaType==='TEXTBOX'">
                                                                <div class="form-group">
                                                                    <input type="text" class="form-control form-control-sm" disabled />
                                                                </div>
                                                            </div>

                                                            <div v-if="input.metaType==='NUMBOX'">
                                                                <div class="form-group">
                                                                    <input type="number" class="form-control form-control-sm" disabled />
                                                                </div>
                                                            </div>

                                                            <div v-if="input.metaType==='EMAILBOX'">
                                                                <div class="form-group">
                                                                    <input type="email" class="form-control form-control-sm" disabled />
                                                                </div>
                                                            </div>

                                                            <div v-if="input.metaType==='CHECKBOX'">
                                                                <div class="form-group">
                                                                    <br />
                                                                    <input type="checkbox" disabled />
                                                                </div>
                                                            </div>

                                                            <div v-if="input.metaType==='TEXTAREA'">
                                                                <div class="form-group">
                                                                    <textarea class="form-control form-control-sm" rows="5" cols="50" disabled></textarea>
                                                                </div>
                                                            </div>

                                                            <div v-if="input.metaType==='DATEPICKER'">
                                                                <div class="form-group">
                                                                    <input type="date" class="form-control form-control-sm" />
                                                                </div>
                                                            </div>

                                                            <div v-if="input.metaType==='COMBOBOX'">
                                                                <div class="form-group">
                                                                    <select class="form-control form-control-sm" disabled>
                                                                        <option>Example 1</option>
                                                                    </select>
                                                                </div>
                                                            </div>

                                                            <div v-if="input.metaType==='LOOKUP'">
                                                                <div>
                                                                    <div class="form form-inline">
                                                                        <button style="margin-left:5px" class="btn btn-sm btn-secondary"><span class="fa fa-plus"></span></button>
                                                                        <input style="margin-left:5px" type="text" class="form-control form-control-sm" disabled />
                                                                        <input style="margin-left:5px" type="text" class="form-control form-control-sm" disabled />
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div v-if="input.metaType==='EDITGRID'">
                                                                <table class="table table-bordered">
                                                                    <thead>
                                                                        <tr>
                                                                            <td v-for="tcol in input.children" v-if="!tcol.isRemoved">
                                                                                <span class="fa fa-cog" v-on:click="openSettingsDlg(tcol)" style="margin:5px; float:right; cursor:pointer" title="Column settings"></span> {{tcol.title}}
                                                                            </td>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody>
                                                                        <tr>
                                                                            <td v-for="tcol in input.children" v-if="!tcol.isRemoved">
                                                                                <div v-if="tcol.metaType==='EDITGRID_TEXTBOX'">
                                                                                    <div class="form-group">
                                                                                        <input type="text" class="form-control form-control-sm" disabled />
                                                                                    </div>
                                                                                </div>
                                                                                <div v-if="tcol.metaType==='EDITGRID_NUMBOX'">
                                                                                    <div class="form-group">
                                                                                        <input type="number" class="form-control form-control-sm" disabled />
                                                                                    </div>
                                                                                </div>
                                                                                <div v-if="tcol.metaType==='EDITGRID_COMBOBOX'">
                                                                                    <div class="form-group">
                                                                                        <select class="form-control form-control-sm" disabled>
                                                                                            <option>Example 1</option>
                                                                                        </select>
                                                                                    </div>
                                                                                </div>
                                                                                <div v-if="tcol.metaType==='EDITGRID_CHECKBOX'">
                                                                                    <div class="form-group">
                                                                                        <br />
                                                                                        <input type="checkbox" disabled />
                                                                                    </div>
                                                                                </div>
                                                                                <div v-if="tcol.metaType==='EDITGRID_DATEPICKER'">
                                                                                    <div class="form-group">
                                                                                        <input type="date" class="form-control form-control-sm" />
                                                                                    </div>
                                                                                </div>
                                                                                <div v-if="tcol.metaType==='EDITGRID_LOOKUP'">
                                                                                    <div class="form form-inline">
                                                                                        <button style="margin:5px" class="btn btn-sm btn-primary"><span class="fa fa-plus"></span></button>
                                                                                        <input type="text" class="form-control form-control-sm" disabled />
                                                                                    </div>

                                                                                </div>
                                                                            </td>
                                                                        </tr>
                                                                    </tbody>
                                                                </table>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <br />
                                            <div class="btn btn-sm btn-secondary" v-on:click="addLayoutRow(sect)">
                                                <span class="fa fa-plus"></span> Add layout row
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>


                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="listview" v-if="model.viewType=='LIVIEW'">


        <div class="btn btn-sm btn-primary" v-on:click="saveListView" style="float:right">
            <span class="fa fa-save"></span> Save changes
        </div>
        <br />
        <hr />

        <div style="margin:15px">
            <div style="padding: 5px; border:dotted 1px gray">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label class="control-label">Title <span style="color: red"> *</span></label>
                            <input type="text" class="form-control form-control-sm" v-model="model.title" />
                        </div>
                    </div>
                    <div class="col-lg-6">

                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12" style="margin: 5px">
                        <b>Fields: </b>
                        <br />
                        <br />
                        <div>
                            <div>
                                <div class="btn btn-sm btn-secondary" v-on:click="addListViewField">
                                    <span class="fa fa-plus"></span> Add list view field
                                </div>
                            </div>
                            <br />
                            <table class="table table">
                                <thead>
                                    <tr>

                                        <th style="width:30%">Title <span style="color: red"> *</span></th>
                                        <th style="width:65%">Column name <span style="color: red"> *</span></th>
                                    </tr>
                                </thead>
                                <tbody v-for="field in model.fields">
                                    <tr>

                                        <td><input type="text" class="form-control form-control-sm" v-model="field.title" /></td>
                                        <td>
                                            <select v-model="field.dbName" class="form-control form-control-sm">
                                                <option v-for="col in listviewtable.columns" v-bind:value="col.dbName">{{col.dbName}}</option>
                                            </select>

                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>







    <!-- SETTING MODAL-->
    <div class="modal" id="ui_setting_modal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">UI Settings</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="ui_setting_modal_body">

                    <div class="settingpnl">
                        <nav>
                            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                                <a class="nav-item nav-link active" id="nav-home-tab" data-toggle="tab" href="#nav-bindings" role="tab" aria-controls="nav-bindings" aria-selected="true">Bindings</a>
                                <a class="nav-item nav-link" id="nav-profile-tab" data-toggle="tab" href="#nav-properties" role="tab" aria-controls="nav-properties" aria-selected="false">Properties</a>
                            </div>
                        </nav>
                        <div class="tab-content" id="nav-tabContent">
                            <div class="tab-pane fade show active" id="nav-bindings" role="tabpanel" aria-labelledby="nav-bindings-tab">
                                <div class="form-group">
                                    <label class="control-label">Title</label>
                                    <input type="text" class="form-control form-control-sm" v-model="active_setting_input.title" />
                                </div>

                                <div class="form-group" v-if="showSettingDbTable">
                                    <label class="control-label">Set database table</label>
                                    <select v-model="active_setting_input.tableName" class="form-control form-control-sm" :disabled="active_setting_input.children.length>0">
                                        <option v-for="tbl in nonDefaultTables" v-bind:value="tbl.dbName">{{tbl.dbName}}</option>
                                    </select>
                                </div>

                                <div class="form-group" v-if="showSettingLookUp">
                                    <label class="control-label">Set data view</label>
                                    <select v-model="active_setting_input.domain" class="form-control form-control-sm">
                                        <option v-for="dv in dataviews" v-bind:value="dv.metaCode">{{dv.title}}</option>
                                    </select>
                                </div>

                                <div class="form-group" v-if="showSettingValueDomain">
                                    <label class="control-label">Set value domain</label>
                                    <select v-model="active_setting_input.domain" class="form-control form-control-sm">
                                        <option v-for="vd in valuedomains" v-bind:value="vd">{{vd}}</option>
                                    </select>
                                </div>

                                <div class="form-group" v-if="showSettingDbColumn">
                                    <label class="control-label">Set database column</label>
                                    <select v-model="active_setting_input.columnName" class="form-control form-control-sm">
                                        <option v-for="col in dbColumns(active_setting_input.tableName)" v-bind:value="col.dbName">{{col.dbName}}</option>
                                    </select>
                                </div>

                                <div class="form-group" v-if="showSettingLookUp">
                                    <label class="model.control-label">Set view column (Key)</label>
                                    <select v-model="active_setting_input.viewColumnName" class="form-control form-control-sm">
                                        <option v-for="col in viewColumns(active_setting_input.domain)" v-bind:value="col.sqlQueryFieldName">{{col.sqlQueryFieldName}}</option>
                                    </select>
                                </div>
                                <div class="form-group" v-if="active_setting_input.metaType=='LOOKUP'">
                                    <label class="control-label">Set database column 2 (opt.)</label>
                                    <select v-model="active_setting_input.columnName2" class="form-control form-control-sm">
                                        <option v-for="col in dbColumns(active_setting_input.tableName)" v-bind:value="col.dbName">{{col.dbName}}</option>
                                    </select>
                                </div>
                                <div class="form-group" v-if="active_setting_input.metaType=='LOOKUP'">
                                    <label class="control-label">Set view column 2 (opt.)</label>
                                    <select v-model="active_setting_input.viewColumnName2" class="form-control form-control-sm">
                                        <option v-for="col in viewColumns(active_setting_input.domain)" v-bind:value="col.sqlQueryFieldName">{{col.sqlQueryFieldName}}</option>
                                    </select>
                                </div>

                                <div class="form-group" v-if="active_setting_input.metaType=='EDITGRID'">
                                    <label class="control-label">Columns</label>
                                    <br />


                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-secondary" type="button" data-toggle="dropdown" aria-haspopup="false" aria-expanded="false">Add <span class="fa fa-plus"></span></button>
                                        <div class="dropdown-menu dropdown-menu-lg-right">
                                            <a class="dropdown-item" href="#" v-on:click="addEditGridColumn('EDITGRID_TEXTBOX')">Textbox</a>
                                            <a class="dropdown-item" href="#" v-on:click="addEditGridColumn('EDITGRID_NUMBOX')">Numeric</a>
                                            <a class="dropdown-item" href="#" v-on:click="addEditGridColumn('EDITGRID_DATEPICKER')">Datepicker</a>
                                            <a class="dropdown-item" href="#" v-on:click="addEditGridColumn('EDITGRID_CHECKBOX')">Checkbox</a>
                                            <a class="dropdown-item" href="#" v-on:click="addEditGridColumn('EDITGRID_COMBOBOX')">Combobox</a>
                                            <a class="dropdown-item" href="#" v-on:click="addEditGridColumn('EDITGRID_LOOKUP')">Lookup</a>
                                        </div>
                                    </div>

                                    <br />
                                    <br />
                                    <table class="table table-bordered">
                                        <thead>
                                            <tr>
                                                <th></th>
                                                <th>Title</th>
                                                <th>Order</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr v-for="tcol in active_setting_input.children">
                                                <td><span class="fa fa-trash" v-on:click="removeEditGridColumn(tcol)" style="cursor:pointer"></span></td>
                                                <td>
                                                    <div class="form-group">
                                                        <input type="text" class="form-control form-control-sm" v-model="tcol.title" />
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="form-group">
                                                        <input type="number" class="form-control form-control-sm" v-model.number="tcol.columnOrder" />
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>

                            </div>
                            <div class="tab-pane fade" id="nav-properties" role="tabpanel" aria-labelledby="nav-properties-tab">
                                @await Html.PartialAsync("_PropertyUI", "active_setting_input")
                            </div>
                        </div>



                    </div>
                </div>
                <div class="modal-footer">
                    <button id="setting_modal_close_btn" type="button" class="btn btn-sm btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>


</div>

@section Scripts
        {





    <script>


        var app = new Vue({
            el: '#app',
            data: {
                model: {

                },
                dbtables: [],
                valuedomains: [],
                dataviews: [],
                listviewtable: {},
                active_setting_input: {},
                metaproperties: [],
                idgenerator: 0
            },
            methods:
            {
                setUserInput: function (input, metatype)
                {
                    input.metaType = metatype;
                    if (input.metaType != "EDITGRID")
                        input.tableName = this.defaultTable.dbName;

                    this.openSettingsDlg(input);
                },
                openSettingsDlg(input)
                {
                    this.active_setting_input = input;
                    if (this.active_setting_input.metaType != "EDITGRID")
                        this.active_setting_input.tableName = this.defaultTable.dbName;
                    this.initializePropertyUI(this.active_setting_input);
                    this.$forceUpdate();
                    $("#ui_setting_modal").modal();
                },
                addLayoutRow: function (sect)
                {
                    var new_row_order = 0;
                    if (sect.layoutRows.length > 0)
                        new_row_order = sect.layoutRows[(sect.layoutRows.length-1)].rowOrder + 1;
                    else
                        new_row_order = 1;

                    var row = { rowOrder: new_row_order, userInputs: [] };
                    for (var i = 0; i < sect.layoutPanels.length; i++) {
                        row.userInputs.push({
                            id: 0,
                            metaType: "",
                            metaCode: "",
                            parentMetaCode: sect.layoutPanels[i].metaCode,
                            rowOrder: new_row_order,
                            columnOrder: sect.layoutPanels[i].columnOrder,
                            children:[]
                        });
                    }
                    sect.layoutRows.push(row);

                },
                addSection: function ()
                {
                    var new_section_order = 0;
                    if (this.model.sections.length > 0)
                        new_section_order = this.model.sections[(this.model.sections.length-1)].rowOrder + 1;
                    else
                        new_section_order = 1;

                    var sect = { id:0, rowOrder: new_section_order, columnOrder: 1, title: "-- Your title --", layoutPanelCount:2,  layoutPanels: [], layoutRows: [], collapsible:true,startExpanded:true };
                    this.model.sections.push(sect);
                    this.layoutClassChanged(sect);
                    this.addLayoutRow(sect);
                },
                addListViewField: function () {
                    this.listview.fields.push({ title: "", parentMetaCode: "", metaCode: "", metaType: "LISTVIEWCOLUMN" });
                },
                addEditGridColumn: function (metatype)
                {
                    this.active_setting_input.children.push({ id: 0, rowOrder: 1, metaType: metatype, metaCode: "", parentMetaCode:"", tableName:this.active_setting_input.tableName });
                },
                dbColumns: function (tablename) {
                    for (var i = 0; i < this.dbtables.length; i++)
                        if (this.dbtables[i].dbName == tablename)
                            return this.dbtables[i].columns;

                    return [];
                },
                viewColumns: function (viewname) {
                    for (var i = 0; i < this.dataviews.length; i++)
                        if (this.dataviews[i].metaCode == viewname)
                            return this.dataviews[i].fields;

                    return [];
                },
                layoutClass: function (sect) {
                    return {
                        'col-lg-12': sect.layoutPanelCount === 1,
                        'col-lg-6': sect.layoutPanelCount === 2,
                        'col-lg-4': sect.layoutPanelCount === 3,
                    }
                },
                componentDesignerClass: function ()
                {
                    return {
                        'col-lg-9': this.model.showComponents,
                        'col-lg-12': !this.model.showComponents,
                    }
                },
                layoutClassChanged: function (sect)
                {

                    while (sect.layoutPanels.length < sect.layoutPanelCount)
                    {
                         this.idgenerator += 1;
                         sect.layoutPanels.push({ id: 0, tempid: this.idgenerator, metaType: "PANEL", metaCode: "PNL_" + this.idgenerator, parentMetaCode: "", title: "", rowOrder: 1, columnOrder: sect.layoutPanels.length+1, isRemoved:false });
                    }

                    for (var i = 0; i < sect.layoutPanels.length; i++)
                    {
                        var pnlnumber = i + 1;
                        if (pnlnumber <= sect.layoutPanelCount)
                            sect.layoutPanels[i].isRemoved = false;
                         if (pnlnumber > sect.layoutPanelCount)
                            sect.layoutPanels[i].isRemoved = true;
                    }

                    for (var r = 0; r < sect.layoutRows.length; r++) {
                        for (var u = 0; u < sect.layoutRows[r].userInputs.length; u++) {
                            if (sect.layoutRows[r].userInputs[u].columnOrder > sect.layoutPanelCount) {
                                sect.layoutRows[r].userInputs[u].isRemoved = true;
                            }
                        }
                    }

                    this.addUserInputSelects();


                },
                addUserInputSelects() {


                    for (var s = 0; s < this.model.sections.length; s++) {
                        var sect = this.model.sections[s];
                        for (var r = 0; r < sect.layoutRows.length; r++)
                        {

                            for (var c = 0; c < sect.layoutPanels.length; c++)
                            {

                                var non_removed_input_exist = false;
                                for (var u = 0; u < sect.layoutRows[r].userInputs.length; u++) {
                                    if (sect.layoutRows[r].userInputs[u].columnOrder === sect.layoutPanels[c].columnOrder && sect.layoutRows[r].userInputs[u].metaType != "" && !sect.layoutRows[r].userInputs[u].isRemoved) {
                                        sect.layoutRows[r].userInputs[u].parentMetaCode = sect.layoutPanels[c].metaCode;
                                        non_removed_input_exist = true;
                                    }
                                }

                                if (!non_removed_input_exist) {
                                    var create_new_selector = true;
                                    for (var u = 0; u < sect.layoutRows[r].userInputs.length; u++) {
                                        if (sect.layoutRows[r].userInputs[u].columnOrder === sect.layoutPanels[c].columnOrder && sect.layoutRows[r].userInputs[u].metaType === "") {
                                            sect.layoutRows[r].userInputs[u].isRemoved = false;
                                            sect.layoutRows[r].userInputs[u].parentMetaCode = sect.layoutPanels[c].metaCode;
                                            create_new_selector = false;
                                            break;
                                        }
                                    }
                                    if (create_new_selector) {

                                        this.idgenerator += 1;
                                        sect.layoutRows[r].userInputs.push({
                                            id: 0,
                                            tempid: this.idgenerator,
                                            metaType: "",
                                            metaCode: "",
                                            parentMetaCode: sect.layoutPanels[c].metaCode,
                                            rowOrder: sect.layoutRows[r].rowOrder,
                                            columnOrder: sect.layoutPanels[c].columnOrder,
                                            children: [],
                                            isRemoved: false
                                        });
                                    }


                                }
                            }
                        }
                    }



                },
                SaveApplicationUI: function ()
                {

                    var context = this;
                    var baseurl = '@Url.Content("~/Model/API/")';
                    var endpointurl = baseurl + "SaveUserInterfaceModel";

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        success: function (response) {
                            context.model = response;
                            context.addUserInputSelects();
                            raiseInformationModal("Success", "The UI model was successfully saved.");
                        },
                        error: function (response)
                        {
                            raiseErrorModal(response.responseJSON);
                        }
                    });
                },
                removeEditGridColumn: function (column)
                {

                    $("#setting_modal_close_btn").click();
                    var context = this;
                    raiseYesNoModal("Delete ?", "Delete column ?", function ()
                    {
                        column.isRemoved = true;
                    });
                },
                removeSection: function (section)
                {
                    raiseYesNoModal("Delete ?", "Delete the entire section ?", function () {
                        section.isRemoved = true;
                        for (var p = 0; p < section.layoutPanels.length; p++) {
                            section.layoutPanels[p].isRemoved = true;
                        }

                        for (var r = 0; r < section.layoutRows.length; r++)
                        {
                            for (var u = 0; u < section.layoutRows[r].userInputs.length; u++) {
                                section.layoutRows[r].userInputs[u].isRemoved = true;
                            }
                        }
                    });
                },
                removeUserInput: function (input)
                {
                     var context = this;
                    raiseYesNoModal("Delete ?", "Delete user interface ?", function ()
                    {
                        input.isRemoved = true;
                        context.addUserInputSelects();
                    });
                },
                saveListView: function ()
                {
                    var context = this;
                    var baseurl = '@Url.Content("~/Model/API/")';
                    var endpointurl = baseurl + "SaveListViewModel";

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        success: function (response)
                        {
                            context.model = response;
                            raiseInformationModal("Success", "The Listview UI model was successfully saved.");
                        },
                        error: function (response) {
                             raiseErrorModal(response.responseJSON);
                        }
                    });
                },
                allowDropUI: function(ev)
                {
                    ev.preventDefault();
                },
                dragUI: function(ev) 
                {
                    ev.dataTransfer.setData("METATYPE", ev.target.id);
                },
                dropUI: function(ev, input) 
                {
                    ev.preventDefault();
                    this.model.showComponents = false;
                    var data = ev.dataTransfer.getData("METATYPE");
                    this.setUserInput(input, data);
                }

            },
            computed:
            {
                showSettingDbColumn: function ()
                {
                     if (this.active_setting_input.metaType == "EDITGRID")
                        return false;

                    return true;
                },
                showSettingDbTable: function ()
                {
                     if (this.active_setting_input.metaType == "EDITGRID")
                        return true;

                    return false;
                },
                showSettingValueDomain: function ()
                {
                    if (this.active_setting_input.metaType === "COMBOBOX")
                        return true;

                      if (this.active_setting_input.metaType == "EDITGRID_COMBOBOX")
                        return true;

                    return false;
                },
                showSettingLookUp: function ()
                {
                    if (this.active_setting_input.metaType === "LOOKUP")
                        return true;

                      if (this.active_setting_input.metaType == "EDITGRID_LOOKUP")
                        return true;

                    return false;
                },
                defaultTable: function () {
                    for (var i = 0; i < this.dbtables.length; i++)
                        if (this.dbtables[i].isDefaultTable)
                            return this.dbtables[i];

                    return {};
                },
                nonDefaultTables: function ()
                {
                    var list = [];
                    for (var i = 0; i < this.dbtables.length; i++)
                        if (!this.dbtables[i].isDefaultTable)
                            list.push(this.dbtables[i]);

                    return list;
                }

            },
            mounted: function () {

                var context = this;
                var baseurl = '@Url.Content("~/Model/API/")';
                var endpointurl = baseurl + "GetApplicationUI/@ViewBag.SystemId/@ViewBag.ViewType";

                //Application
                $.get(endpointurl, function (response) {
                    context.model = response;
                    context.addUserInputSelects();
                }).done(function () {

                    //Tables
                    endpointurl = baseurl + "GetDatabaseTables/@ViewBag.SystemId";
                    $.get(endpointurl, function (response) {
                        context.dbtables = response;
                    }).done(function () {

                        //DataViews
                        endpointurl = baseurl + "GetDataViewModels";
                        $.get(endpointurl, function (response) {
                            context.dataviews = response;
                        }).done(function () {

                            //Valuedomains
                            endpointurl = baseurl + "GetValueDomainNames";
                            $.get(endpointurl, function (response) {
                                context.valuedomains = response;
                            }).done(function () {

                                    //Selectable listview columns
                                    endpointurl = baseurl + "GetListviewTable/@ViewBag.SystemId";
                                    $.get(endpointurl, function (response) {
                                        context.listviewtable = response;
                                    });

                            });
                        });

                    });
                });
            }
        });

    </script>
}
