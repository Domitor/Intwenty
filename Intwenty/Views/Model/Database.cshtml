

@{
    ViewData["Title"] = "Manage database";
}


@await Html.PartialAsync("_Modals")

<div id="app">


    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>Database model designer</h2></div>
        <div class="card-body">
            Define the datastructure for the {{model.title}} application
            <br />
            <a asp-action="ApplicationList" asp-controller="Model" role="button" class="btn btn-sm btn-outline-secondary" style="margin:10px"><span class="far fa-hand-point-left" style="font-size:large"></span> Back to list</a>
            <br />
        </div>

    </div>


    <br />
    <div class="alert alert-success alert-dismissible fade show" role="alert" id="savealert" v-if="modelSaved">
        <strong>Changes have been saved !</strong><br />
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <br />

    <h4>Database tables</h4>

    <div>
        <div class="btn btn-sm btn-secondary" v-on:click="addDbTable">
            <span class="fa fa-plus"></span> Add table
        </div>
        <div class="btn btn-sm btn-primary" v-on:click="saveApplicationDB" style="float:right">
            <span class="fa fa-save"></span> Save changes
        </div>
    </div>
    <br />
    <table class="table table-bordered">
        <thead>
            <tr>
                <th style="width:40%">Table name <span style="color: red"> *</span></th>
                <th style="width:50%">Description <span style="color: red"> *</span></th>
                <th style="width:10%"></th>
            </tr>
        </thead>
        <tr v-for="item in model.tables">
            <td><input type="text" class="form-control form-control-sm" v-model="item.dbName" :disabled="item.isDefaultTable" /></td>
            <td><input type="text" class="form-control form-control-sm" v-model="item.description" :disabled="item.isDefaultTable" /></td>
            <td></td>
        </tr>
    </table>

    <br />
    <br />

    <h4>Database columns</h4>

    <div>
        <div class="btn btn-sm btn-secondary" v-on:click="addDbColumn">
            <span class="fa fa-plus"></span> Add column
        </div>
    </div>
    <br />
    <table class="table table-bordered">
        <thead>
            <tr>
                <th></th>
                <th style="width:23%">Table name <span style="color: red"> *</span></th>
                <th style="width:18%">Column name <span style="color: red"> *</span></th>
                <th style="width:18%">Data type <span style="color: red"> *</span></th>
                <th style="width:28%">Description</th>
                <th style="width:8%"></th>
            </tr>
        </thead>
        <tbody v-for="modelitem in model.columns">
            <tr>
                <td><span class="fa fa-cog" v-on:click="initializePropertyUI(modelitem)" style="cursor:pointer" :disabled="modelitem.isFrameworkItem"></span></td>
                <td>
                    <select v-model="modelitem.tableName" class="form-control form-control-sm" :disabled="modelitem.isFrameworkItem">
                        <option v-for="tbl in model.tables" v-bind:value="tbl.dbName">{{tbl.dbName}}</option>
                    </select>
                </td>
                <td><input type="text" class="form-control form-control-sm" v-model="modelitem.dbName" :disabled="modelitem.isFrameworkItem" /></td>
                <td>
                    <select v-model="modelitem.dataType" class="form-control form-control-sm" :disabled="modelitem.isFrameworkItem">
                        <option v-for="tp in datatypes" v-bind:value="tp">{{tp}}</option>
                    </select>
                </td>
                <td>
                    <input type="text" class="form-control form-control-sm" v-model="modelitem.description" :disabled="modelitem.isFrameworkItem" />
                </td>
                <td class="mx-auto">
                    <button class="btn btn-sm btn-danger float-sm-right" v-on:click="deleteDbColumn(modelitem)" :disabled="modelitem.isFrameworkItem"><i class="fa fa-trash"></i></button>
                </td>
            </tr>
            <tr>
                <td colspan="1"></td>
                <td colspan="5">
                    <div v-if="modelitem.showSettings">
                        <b>Column settings</b>
                        <br />

                        @await Html.PartialAsync("_PropertyUI", "modelitem")


                    </div>
                </td>
            </tr>
        </tbody>
    </table>



</div>

@section Scripts
    {
    <script>

        var app = new Vue({
            el: '#app',
            data: {
                model: { tables: [], columns: [] },
                datatypes: [],
                idgen: -1
                ,modelSaved:false
            },
            methods:
            {
                
                saveApplicationDB: function ()
                {
                    var context = this;
                    var baseurl = '@Url.Content("~/Model/API/")';
                    var endpointurl = baseurl + "SaveDatabaseModels";


                    if (!hasRequiredValues(context.model.tables, ["dbName"]) ||
                       !hasRequiredValues(context.model.columns, ["tableName","dbName","dataType"]))
                    {
                        raiseValidationErrorModal("Can't save since some required fields are missing.");
                        return;
                    }

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        success: function (response)
                        {
                            context.model = response;
                            context.modelSaved = true;
                            setTimeout(function () { context.modelSaved = false; }, 3000);
                        },
                        error: function (response)
                        {
                            raiseErrorModal(response.responseJSON);
                        }
                    });

                },
                addDbTable: function ()
                {
                    var context = this;
                    context.idgen -= 1;
                    context.model.tables.unshift({ properties: "", metaType: "DATATABLE", properties: "", id: context.idgen });
                },
                addDbColumn: function () {
                    var context = this;
                    context.idgen -= 1;
                    context.model.columns.unshift({ properties: "", metaType: "DATACOLUMN", id: context.idgen, showSettings:false, mandatory: false, domain:"" });
                }
                ,
                deleteDbColumn: function (col)
                {
                    var context = this;

                    if (col.id < 1)
                    {
                        for (var i = 0; i < context.model.columns.length; i++)
                        {
                            if (context.model.columns[i].id === col.id)
                            {
                                context.model.columns.splice(i, 1);
                                break;
                            }
                        }
                        return;
                    }

                    var yesfunc = function ()
                    {

                        var baseurl = '@Url.Content("~/Model/API/")';
                        var endpointurl = baseurl + "DeleteDatabaseModel";


                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(col),
                            success: function (response) {
                                context.model = response;
                            },
                            error: function (response) {
                                raiseErrorModal(response.responseJSON);
                            }
                        });
                    }

                    raiseYesNoModal("Delete column ?", "Warning if this column is bound to an UI component, you might break the application. Delete anyway ?", yesfunc);

                }

            },
            mounted: function ()
            {
                var context = this;
                var baseurl = '@Url.Content("~/Model/API/")';
                var endpointurl = baseurl + "GetDatabaseModels/@ViewBag.SystemId";
                //Application
                $.get(endpointurl, function (response){
                    context.model = response;
                    //DataTypes
                    endpointurl = baseurl + "GetIntwentyDataTypes";
                    $.get(endpointurl, function (response) {
                        context.datatypes = response;
                    }).fail(function (response) {
                        raiseErrorModal(response.responseJSON);
                    });
                }).fail(function (response){
                    raiseErrorModal(response.responseJSON);
                });


             


            }
        })

    </script>
}