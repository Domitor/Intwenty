

@{
    ViewData["Title"] = "Add / Edit Integrations";
}

@await Html.PartialAsync("_Modals")


<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>Integrations</h2></div>
        <div class="card-body">Create endpoints to make your data avaialable for other parties.</div>
    </div>

    <br />
    <div class="alert alert-success alert-dismissible fade show" role="alert" id="savealert" v-if="model.modelSaved">
        <strong>Changes have been saved !</strong><br />
        <p>Changes to endpoints takes effect the next time the system is restarted</p>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <br />


    <div>
        <div class="btn btn-sm btn-primary" v-on:click="saveChanges">
            <span class="glyphicon glyphicon-save"></span> Save changes
        </div>

        <div class="btn btn-sm btn-secondary" v-on:click="addEndpoint" style="float:right">
            <span class="fa fa-plus"></span> Add Endpoint
        </div>
    </div>
    <br />
    <br />
    <table class="table table">
        <thead>
            <tr>
                <th style="width:5%"></th>
                <th style="width:25%">Path <span style="color: red"> *</span></th>
                <th style="width:25%">Data Source Type <span style="color: red"> *</span></th>
                <th style="width:25%">Data Source <span style="color: red"> *</span></th>
                <th style="width:20%"></th>
            </tr>
        </thead>
        <tbody v-for="entry in model.endpoints">

            <tr>
                <td><span class="fa fa-cog" v-on:click="entry.expanded = !entry.expanded" style="cursor:pointer"></span></td>

                <td>
                    <input v-bind:id="'tbPath_' + entry.id" type="text" class="form-control form-control-sm" v-model="entry.path" v-on:input="markChanged(entry)" placeholder="Example: /API/Customer/" />
                </td>
                <td>
                    <select v-bind:id="'cbendpointType_' + entry.id" v-model="entry.endpointType" class="form-control form-control-sm" v-on:input="markChanged(entry)">
                        <option v-for="eptype in model.endpointTypes" v-bind:value="eptype">{{eptype.title}}</option>
                    </select>
                </td>
                <td>
                    <select v-bind:id="'cbdataSource_' + entry.id" v-model="entry.dataSource" class="form-control form-control-sm" v-on:input="markChanged(entry)" :disabled="!entry.endpointType">
                        <option v-for="source in dataSourceSelection(entry)" v-bind:value="source.id">{{source.title}}</option>
                    </select>
                </td>

                <td><div class="btn btn-sm btn-danger" v-on:click="deleteEndpoint(entry)"><i class="fa fa-trash"></i></div></td>
            </tr>

            <tr v-if="entry.expanded">

                <td colspan="4">
                    <div class="form-group">
                        <label class="control-label">Title</label>
                        <input v-bind:id="'tbTitle_' + entry.id" type="text" class="form-control form-control-sm" v-model="entry.title" />
                    </div>
                    <div class="form-group">
                        <label class="control-label">Description</label>
                        <textarea v-bind:id="'taDescription_' + entry.id"
                                  v-model="entry.description"
                                  rows="3"
                                  cols="50"
                                  class="form-control form-control-sm"></textarea>
                    </div>
                </td>


            </tr>
        </tbody>
    </table>

</div>

@section Scripts
    {

    <script>

        var app = new Vue({
            el: '#app',
            data:
            {
                model: {},
                idgen: 0
                
            },
            methods: {


                addEndpoint: function ()
                {

                    this.idgen -= 1;
                    this.model.endpoints.unshift({ id: this.idgen, endpointType: "", action: "", path: "", dataSource:"", expanded:false, description:"",title:"" });
                },
                deleteEndpoint: function (entry)
                {
                    var context = this;

                    if (entry.id < 1)
                    {
                        for (var i = 0; i < context.model.endpoints.length; i++)
                        {
                            if (context.model.endpoints[i].id === entry.id)
                            {
                                context.model.endpoints.splice(i, 1);
                                break;
                            }
                        }
                        return;
                    }

                    var yesfunc = function ()
                    {

                        var baseurl = '@Url.Content("~/Model/API/")';
                        var endpointurl = baseurl + "DeleteEndpoint";


                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(entry),
                            success: function (response) {
                                context.model = response;
                                
                            },
                            error: function (response) {
                                raiseErrorModal(response.responseJSON);
                            }
                        });
                    }

                    raiseYesNoModal("Delete endpoint ?", "The endpoint will be deleted, continue ?", yesfunc);

                },
                markChanged: function (entry)
                {
                    entry.properties = "CHANGED=TRUE";
                    if (entry.endpointType)
                        $("#cbendpointType_" + entry.id).removeClass('requiredNotValid');
                    if (entry.dataSource)
                        $("#cbdataSource_" + entry.id).removeClass('requiredNotValid');
                    if (entry.path)
                        $("#tbPath_" + entry.id).removeClass('requiredNotValid');
                  

                },
                saveChanges: function ()
                {

                    var list = [];
                    var context = this;
                    var invalid = false;

                    for (var i = 0; i < context.model.endpoints.length; i++)
                    {

                        var entry = context.model.endpoints[i];

                        if (!entry.endpointType)
                        {
                            $("#cbendpointType_" + entry.id).addClass('requiredNotValid');
                            invalid=true;
                        }
                        if (!entry.dataSource) {
                            $("#cbdataSource_" + entry.id).addClass('requiredNotValid');
                            invalid = true;
                        }
                        if (!entry.path)
                        {
                            $("#tbPath_" + entry.id).addClass('requiredNotValid');
                            invalid = true;
                        }
                      

                        if (invalid)
                            return;

                        if (entry.id < 1 || entry.properties.indexOf("CHANGED=TRUE") > -1)
                            list.push(entry);
                    }

                    var baseurl = '@Url.Content("~/Model/API/")';
                    var endpointurl = baseurl + "SaveEndpoints";


                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(list),
                        success: function (response)
                        {
                            context.model = response;
                            context.model.modelSaved = true;
                            setTimeout(function () { context.model.modelSaved = false; }, 3000);
                           
                        },
                        error: function (response)
                        {
                            raiseErrorModal(response.responseJSON);
                        }
                    });

                },
                dataSourceSelection(endpoint)
                {
                    return this.model.endpointDataSources.filter(p => p.type === endpoint.endpointType.datasourcetype);
                }
                

            },
            computed:
            {
                example: function ()
                {

                }

            },
            mounted: function ()
            {

                //endpoints
                var context = this;
                var baseurl = '@Url.Content("~/Model/API/")';
                var endpointurl = baseurl + "GetEndpoints";
                $.get(endpointurl, function (response)
                {
                    context.model = response;
                   
                   
                });

            }
        });
    </script>

}

