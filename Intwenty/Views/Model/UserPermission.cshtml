
<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>User Permissions</h2></div>
        <div class="card-body">Manage permissions for user: <strong>{{model.userName}}</strong><br />Don't forget to press 'Save Changes' when you're done.</div>
    </div>
    <br />


    <div class="alert alert-success alert-dismissible fade show" role="alert" id="savealert" v-if="model.modelSaved">
        <strong>Changes have been saved !</strong><br />
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>



    <div>
        <div class="btn btn-sm btn-primary" v-on:click="save">
            <span class="glyphicon glyphicon-save"></span> Save Changes
        </div>
    </div>

    <br />

    <h4>Roles</h4>

    <div class="row">

        <div class="col-lg-6">
            <div class="form-group">
                <select v-model="model.selectedRole" class="form-control form-control-sm">
                    <option v-for="role in model.roles" v-bind:value="role.roleName">{{role.roleName}}</option>
                </select>
            </div>
        </div>
        <div class="col-lg-3"> <div class="btn btn-sm btn-secondary" v-on:click="addRole"><span class="fa fa-plus"></span> Add</div></div>
        <div class="col-lg-3"></div>
    </div>

    <div class="row">

        <div class="col-lg-6">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Role</th>
                        <th></th>
                    </tr>
                </thead>
                <tr v-for="item in model.userRoles">
                    <td>{{item.roleName}}</td>
                    <td><button type="button" class="btn btn-sm btn-danger" v-on:click="deleteRole(item)"><i class="fa fa-trash"></i></button></td>
                </tr>
            </table>
        </div>
        <div class="col-lg-3"></div>
        <div class="col-lg-3"></div>
    </div>

    <hr />

    <h4>System Permissions</h4>

    <div class="row">

        <div class="col-lg-6">
            <div class="form-group">
                <select v-model="model.selectedSystemPermission" class="form-control form-control-sm">
                    <option v-for="perm in model.systemPermissions" v-bind:value="perm">{{perm.title}}</option>
                </select>
            </div>
        </div>
        <div class="col-lg-3"> <div class="btn btn-sm btn-secondary" v-on:click="addSystemPermission"><span class="fa fa-plus"></span> Add</div></div>
        <div class="col-lg-3"></div>
    </div>

    <div class="row">

        <div class="col-lg-6">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Read</th>
                        <th>Modify</th>
                        <th>Delete</th>
                        <th></th>
                    </tr>
                </thead>
                <tr v-for="item in model.userSystemPermissions">
                    <td>{{item.title}}</td>
                    <td><input type="checkbox" v-model="item.read" /></td>
                    <td><input type="checkbox" v-model="item.modify" /></td>
                    <td><input type="checkbox" v-model="item.delete" /></td>
                    <td><button type="button" class="btn btn-sm btn-danger" v-on:click="deletePermission(item)"><i class="fa fa-trash"></i></button></td>
                </tr>
            </table>
        </div>
        <div class="col-lg-3"></div>
        <div class="col-lg-3"></div>
    </div>

    <hr />

    <h4>Application Permissions</h4>

    <div class="row">

        <div class="col-lg-6">
            <div class="form-group">
                <select v-model="model.selectedApplicationPermission" class="form-control form-control-sm">
                    <option v-for="perm in model.applicationPermissions" v-bind:value="perm">{{perm.title}}</option>
                </select>
            </div>
        </div>
        <div class="col-lg-3"> <div class="btn btn-sm btn-secondary" v-on:click="addApplicationPermission"><span class="fa fa-plus"></span> Add</div></div>
        <div class="col-lg-3"></div>
    </div>

    <div class="row">

        <div class="col-lg-6">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Read</th>
                        <th>Modify</th>
                        <th>Delete</th>
                        <th></th>
                    </tr>
                </thead>
                <tr v-for="item in model.userApplicationPermissions">
                    <td>{{item.title}}</td>
                    <td><input type="checkbox" v-model="item.read" /></td>
                    <td><input type="checkbox" v-model="item.modify" /></td>
                    <td><input type="checkbox" v-model="item.delete" /></td>
                    <td><button type="button" class="btn btn-sm btn-danger" v-on:click="deletePermission(item)"><i class="fa fa-trash"></i></button></td>
                </tr>
            </table>
        </div>
        <div class="col-lg-3"></div>
        <div class="col-lg-3"></div>
    </div>

</div>

@section Scripts
{


    <script>

      var app = new Vue({
            el: '#app',
            data:
            {
                model: {
                    userId: ""
                    ,userName: "Testman"
                    ,userRoles: []
                    ,userApplicationPermissions: []
                    ,userSystemPermissions: []
                    ,roles: []
                    ,applicationPermissions: []
                    ,systemPermissions: []
                },
                idgen: 0

            },
            methods: {

                markChanged: function (entry)
                {

                },
                addRole: function ()
                {
                    if (!this.model.selectedRole)
                        return;

                    this.model.userRoles.push({ roleName: this.model.selectedRole });

                },
                deleteRole: function (item)
                {
                    var context = this;
                    for (var i = 0; i < context.model.userRoles.length; i++) {
                        if (context.model.userRoles[i].roleName === item.roleName)
                        {
                            var deleteobject = { userId: context.model.id, permissionType: "ROLE", metaCode: item.roleName  };
                            context.model.userRoles.splice(i, 1);
                            context.deleteOnServer(deleteobject);
                            break;
                        }
                    }
                },
                addSystemPermission: function ()
                {
                    if (!this.model.selectedSystemPermission)
                        return;

                    this.model.userSystemPermissions.push(this.model.selectedSystemPermission);

                },
                addApplicationPermission: function ()
                {
                    if (!this.model.selectedApplicationPermission)
                        return;

                    this.model.userApplicationPermissions.push(this.model.selectedApplicationPermission);


                },
                deletePermission: function (item)
                {
                    var context = this;
                    for (var i = 0; i < context.model.userSystemPermissions.length; i++) {
                        if (context.model.userSystemPermissions[i].metaCode === item.metaCode &&
                            context.model.userSystemPermissions[i].permissionType === item.permissionType)
                        {
                            var deleteobject = { userId: context.model.id, metaCode: item.metaCode, permissionType: item.permissionType};
                            context.model.userSystemPermissions.splice(i, 1);
                            context.deleteOnServer(deleteobject);
                            break;
                        }
                    }

                    for (var i = 0; i < context.model.userApplicationPermissions.length; i++)
                    {
                        if (context.model.userApplicationPermissions[i].metaCode === item.metaCode &&
                            context.model.userApplicationPermissions[i].permissionType === item.permissionType)
                        {
                            var deleteobject = { userId: context.model.id, metaCode: item.metaCode, permissionType: item.permissionType };
                            context.model.userApplicationPermissions.splice(i, 1);
                            context.deleteOnServer(deleteobject);
                            break;
                        }
                    }
                },
                save: function ()
                {
                    var context = this;
                    var baseurl = '@Url.Content("~/Model/API/")';
                    var endpointurl = baseurl + "SaveUserPermissions";

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        success: function (response)
                        {
                            context.model = response;
                            context.model.modelSaved = true;
                            setTimeout(function () { context.model.modelSaved = false; }, 3000);
                        },
                        error: function (response)
                        {
                            raiseErrorModal("Error saving user permissions");
                        }
                    });

                },
                deleteOnServer: function (item)
                {
                    var context = this;
                    var baseurl = '@Url.Content("~/Model/API/")';
                    var endpointurl = baseurl + "DeleteUserPermission";

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(item),
                        success: function (response)
                        {
                            context.model = response;
                            context.model.modelSaved = true;
                            setTimeout(function () { context.model.modelSaved = false; }, 3000);
                        },
                        error: function (response)
                        {
                            raiseErrorModal("Error saving user permissions");
                        }
                    });

                }



            },
            computed:
            {
                example: function ()
                {

                }

            },
            mounted: function ()
            {

                var context = this;
                var baseurl = '@Url.Content("~/Model/API/")';
                var endpointurl = baseurl + "GetUserPermissions/@ViewBag.SystemId";
                $.get(endpointurl, function (response)
                {
                    context.model = response;

                });

            }
        });


    </script>


}