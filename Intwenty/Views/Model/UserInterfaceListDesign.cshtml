@model UserInterfaceModelItem

@{
    ViewData["Title"] = "UI Design";
}

@await Html.PartialAsync("_Modals")

<style>
    .formpanel {
        border: 1px dotted black;
        margin: 5px;
        padding: 5px;
        min-height: 120px;
    }

    .settingpnl {
        border: 1px dotted black;
        margin-left: 5px;
        margin-top: 10px;
        margin-right: 30px;
        padding: 15px;
    }

    .uipnl {
        margin-top: 10px;
    }

    
}
</style>


<div id="app" class="uidesigner">

    <br />
    <br />

    <div class="card">
        <div class="card-header"><h2>List UI designer</h2></div>
        <div class="card-body">

            Design list user interface for views in application <b>@Model.ApplicationInfo.Title</b>.

            <br />

            <ul class="nav">
                <li class="nav-item">
                    <a asp-action="ApplicationViewList" asp-controller="Model" asp-route-id="@Model.ApplicationInfo.Id" role="button" class="btn btn-sm btn-outline-secondary" style="margin:10px"><span class="far fa-hand-point-left" style="font-size:large"></span> Back</a>
                </li>
                <li class="nav-item">
                    <div class="btn btn-sm btn-primary" v-on:click="saveApplicationUI()" style="margin:10px">
                        <i class="fa fa-save"></i> Save changes
                    </div>
                </li>

            </ul>
        </div>
    </div>



    <br />

    <div class="row">
        <div class="col-md-3">
            <button class="btn btn-sm btn-outline-secondary" v-if="hasFunction('FILTER')" v-on:click="openFunctionDlg('FILTER')" style="width:220px"><span class="fas fa-cog" title="Filter"></span> Configure Filter</button>
            <button class="btn btn-sm btn-outline-secondary" v-if="!hasFunction('FILTER')" v-on:click="openFunctionDlg('FILTER')" style="width:220px"><span class="fas fa-plus" title="Add a filter function"></span> Add filter function</button>
        </div>
        <div class="col-md-3">
            <button class="btn btn-sm btn-outline-secondary" v-if="hasFunction('PAGING')" v-on:click="openFunctionDlg('PAGING')" style="width:220px"><span class="fas fa-cog" title="Paging"></span> Configure Paging</button>
            <button class="btn btn-sm btn-outline-secondary" v-if="!hasFunction('PAGING')" v-on:click="openFunctionDlg('PAGING')" style="width:220px"><span class="fas fa-plus" title="Add a paging function"></span> Add paging function</button>
        </div>
        <div class="col-md-3">
            <button class="btn btn-sm btn-outline-secondary" v-if="hasFunction('EXPORT')" v-on:click="openFunctionDlg('EXPORT')" style="width:220px"><span class="fas fa-cog" title="Export"></span> Configure export</button>
            <button class="btn btn-sm btn-outline-secondary" v-if="!hasFunction('EXPORT')" v-on:click="openFunctionDlg('EXPORT')" style="width:220px"><span class="fas fa-plus" title="Add an export function"></span> Add export function</button>
        </div>
        <div class="col-md-3">

        </div>
    </div>

    <br />

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label class="control-label">List Title</label>
                <input type="text" class="form-control form-control-sm" v-model="model.table.title" />
            </div>
        </div>

        <div class="col-md-3">

        </div>
        <div class="col-md-3">

        </div>
    </div>
    

    <br />
    <br />
    <br />
    <div class="row">
        <div class="col-md-6">
            <button class="btn btn-sm btn-outline-secondary" v-if="hasFunction('CREATE')" v-on:click="openFunctionDlg('CREATE')" style="width:220px"><span class="fas fa-cog" title="Create"></span> Configure Create Line</button>
            <button class="btn btn-sm btn-outline-secondary" v-if="!hasFunction('CREATE')" v-on:click="openFunctionDlg('CREATE')" style="width:220px"><span class="fas fa-plus" title="Add Create Line Button"></span> Add Create Line function</button>
        </div>

        <div class="col-md-3">

        </div>
        <div class="col-md-3">

        </div>
    </div>






    <br />

    <table class="table table">
        <thead>
            <tr>
                <th style="width:5%"></th>
                <th style="width:5%"></th>
                <template v-for="field in model.table.columns">
                    <th v-if="!field.isRemoved">
                        {{field.title}}
                        <button class="btn btn-sm" v-on:click="openColumnDlg(field)"><span class="fas fa-cog" title="Edit Column"></span></button>
                    </th>
                </template>
                <th>Add Column <button class="btn btn-sm btn-outline-secondary" v-on:click="openColumnDlg(null)"><span class="fas fa-plus" title="Add Column"></span></button></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="btn btn-sm btn-danger" v-if="hasFunction('DELETE')" v-on:click="openFunctionDlg('DELETE')"><span class="fas fa-trash" title="Remove"></span></button>
                    <button class="btn btn-sm btn-outline-secondary" v-if="!hasFunction('DELETE')" v-on:click="openFunctionDlg('DELETE')"><span class="fas fa-plus" title="Add delete button"></span></button>
                </td>
                <td>
                    <button class="btn btn-sm btn-secondary" v-if="hasFunction('EDIT')" v-on:click="openFunctionDlg('EDIT')"><span class="fas fa-edit" title="Edit"></span></button>
                    <button class="btn btn-sm btn-outline-secondary" v-if="!hasFunction('EDIT')" v-on:click="openFunctionDlg('EDIT')"><span class="fas fa-plus" title="Add edit button"></span></button>
                </td>
                <template v-for="field in model.table.columns">
                    <td v-if="!field.isRemoved">
                        -
                    </td>
                </template>
                <td>
                </td>
            </tr>
        </tbody>
    </table>



    <div class="modal" id="create_edit_function_modal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="yesno_dlg_modal_hdr" class="modal-title">{{functionsettings.dlgHeader}}</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="settingpnl">

                        <nav>
                            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                                <a class="nav-item nav-link active" id="nav-home-tab" data-toggle="tab" href="#nav-functions" role="tab" aria-controls="nav-functions" aria-selected="true">Function</a>
                                <a class="nav-item nav-link" id="nav-profile-tab" data-toggle="tab" href="#nav-properties" role="tab" aria-controls="nav-properties" aria-selected="false">Properties</a>
                            </div>
                        </nav>

                        <div class="tab-content" id="nav-tabContent">

                            <div class="tab-pane fade show active" id="nav-functions" role="tabpanel" aria-labelledby="nav-functions-tab">
                                <br />

                                <h5 v-if="functionsettings.metaType=='CREATE'">Create line function</h5>
                                <h5 v-if="functionsettings.metaType=='EDIT'">Edit line function</h5>
                                <h5 v-if="functionsettings.metaType=='DELETE'">Delete line function</h5>

                                <div class="alert alert-primary" v-if="functionsettings.metaType!=''">{{getFunctionDescription()}}</div>

                                <div class="form-group" v-if="functionHasButtonText()">
                                    <label class="control-label">Button Text<span style="color: red"> *</span></label>
                                    <input id="functitle" type="text" class="form-control form-control-sm" v-model="functionsettings.title" />
                                </div>

                                <span v-if="functionCanBeModal()"><input type="checkbox" v-model="functionsettings.isModalAction" /> Is Modal Action</span>

                                <div class="form-group" v-if="(functionCanBeModal() && functionsettings.isModalAction)">
                                    <label class="control-label">Function UI<span style="color: red"> *</span></label>
                                    <select class="form-control form-control-sm" v-model="functionsettings.actionUserInterfaceMetaCode">
                                        <option v-for="item in model.actionUserInterfaces" v-bind:value="item.metaCode">{{item.title}}</option>
                                    </select>
                                </div>

                                <div class="form-group" v-if="(functionHasPath() && !functionsettings.isModalAction)">
                                    <label class="control-label">Path</label>
                                    <input id="funcpath" type="text" class="form-control form-control-sm" v-model="functionsettings.actionPath" />
                                </div>

                            </div>
                            <div class="tab-pane fade" id="nav-properties" role="tabpanel" aria-labelledby="nav-properties-tab">
                                @await Html.PartialAsync("_PropertyUI", "functionsettings")
                            </div>

                        </div>

                    </div>

                </div>
                <div class="modal-footer">
                    <button id="create_edit_function_modal_deletebtn" type="button" class="btn btn-sm btn-danger" data-dismiss="modal">Delete</button>
                    <button type="button" class="btn btn-sm btn-secondary" data-dismiss="modal">Cancel</button>
                    <button id="create_edit_function_modal_yesbtn" type="button" class="btn btn-sm btn-primary" data-dismiss="modal">Save</button>

                </div>
            </div>
        </div>
    </div>

    <div class="modal" id="create_edit_column_modal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="yesno_dlg_modal_hdr" class="modal-title">{{columnsettings.dlgHeader}}</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="settingpnl">

                        <nav>
                            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                                <a class="nav-item nav-link active" id="nav-home-tab" data-toggle="tab" href="#nav-columns" role="tab" aria-controls="nav-columns" aria-selected="true">Column</a>
                                <a class="nav-item nav-link" id="nav-profile-tab" data-toggle="tab" href="#nav-colproperties" role="tab" aria-controls="nav-colproperties" aria-selected="false">Properties</a>
                            </div>
                        </nav>

                        <div class="tab-content" id="nav-tabContent">

                            <div class="tab-pane fade show active" id="nav-columns" role="tabpanel" aria-labelledby="nav-functions-tab">
                                <br />

                                <div class="form-group">
                                    <label class="control-label">Title</label>
                                    <input id="coltitle" type="text" class="form-control form-control-sm" v-model="columnsettings.title" />
                                </div>

                                <div class="form-group">
                                    <label class="control-label">Binding<span style="color: red"> *</span></label>
                                    <select class="form-control form-control-sm" v-model="columnsettings.dataColumn1DbName">
                                        <option v-for="item in model.dataTable.columns" v-bind:value="item.dbName">{{item.dbName}}</option>
                                    </select>
                                </div>

                            </div>
                            <div class="tab-pane fade" id="nav-colproperties" role="tabpanel" aria-labelledby="nav-colproperties-tab">
                                @await Html.PartialAsync("_PropertyUI", "columnsettings")
                            </div>

                        </div>

                    </div>

                </div>
                <div class="modal-footer">
                    <button id="create_edit_column_modal_deletebtn" type="button" class="btn btn-sm btn-danger" data-dismiss="modal">Delete</button>
                    <button type="button" class="btn btn-sm btn-secondary" data-dismiss="modal">Cancel</button>
                    <button id="create_edit_column_modal_yesbtn" type="button" class="btn btn-sm btn-primary" data-dismiss="modal">Save</button>
                </div>
            </div>
        </div>
    </div>




</div>

@section Scripts
        {





    <script>



        var app = new Vue({
            el: '#app',
            data: {
                model: {
                    table: { columns: [] },
                    dataTable: { columns: [] },
                    functions: [],
                    metaType: "",
                    metaCode: "",
                    id:0
                },
                functionsettings: {},
                columnsettings: {}
            },
            methods:
            {

              
                saveApplicationUI: function ()
                {
                    var context = this;
                    var baseurl = '@Url.Content("~/Model/API/")';
                    var endpointurl = baseurl + "SaveApplicationListUI";

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        success: function (response)
                        {
                            context.model = response;
                            raiseInformationModal("Success", "The UI was successfully saved.");
                        },
                        error: function (response) {
                             raiseErrorModal(response.responseJSON);
                        }
                    });
                },
                getFunctionDescription: function () {
                    var context = this;

                    if (context.functionsettings.metaType == 'CREATE')
                        return "Adds a button that navigates the user to the table's create view or brings up a modal input ui for creating a record";
                    if (context.functionsettings.metaType == 'EDIT')
                        return "Adds a button that navigates the user to the table's edit view or brings up a modal input ui for edting a record";
                    if (context.functionsettings.metaType == 'NAVIGATE')
                        return "Adds a button to the view that navigates the user to the [path]";
                    if (context.functionsettings.metaType == 'EXPORT')
                        return "Adds a button to the view that exports data to ms excel";
                    if (context.functionsettings.metaType == 'SAVE')
                        return "Adds a button to the view that triggers the save operation in the connected tables";
                    if (context.functionsettings.metaType == 'DELETE')
                        return "Adds a button to the view that triggers a delete operation in the connected datatable: " + context.model.dataTable.dbName;
                    if (context.functionsettings.metaType == 'FILTER')
                        return "Adds the posibility to filter data in the connected datatable: " + context.model.dataTable.dbName;
                    if (context.functionsettings.metaType == 'PAGING')
                        return "Adds the posibility to page data in the connected datatable: " + context.model.dataTable.dbName;


                    return "";
                },
                functionCanBeModal: function ()
                {
                    var context = this;

                    if (context.functionsettings.metaType == 'CREATE')
                        return true;
                    if (context.functionsettings.metaType == 'EDIT')
                        return true;

                    return false;
                },
                functionHasPath: function () {
                    var context = this;

                    if (context.functionsettings.metaType == 'CREATE')
                        return true;
                    if (context.functionsettings.metaType == 'EDIT')
                        return true;
                    if (context.functionsettings.metaType == 'NAVIGATE')
                        return true;


                    return false;
                },
                functionHasButtonText: function () {
                    var context = this;

                    if (context.functionsettings.metaType == 'FILTER')
                        return false;
                    if (context.functionsettings.metaType == 'PAGING')
                        return false;

                    return true;
                },
                hasFunction: function (functiontype) {
                    var context = this;

                    for (var i = 0; i < context.model.functions.length; i++)
                    {
                        if (context.model.functions[i].metaType == functiontype && !context.model.functions[i].isRemoved)
                            return true;
                    }

                    return false;
                },
                getFunction: function (functiontype) {
                    var context = this;

                    for (var i = 0; i < context.model.functions.length; i++) {
                        if (context.model.functions[i].metaType == functiontype && !context.model.functions[i].isRemoved)
                            return context.model.functions[i];
                    }

                    return null;
                },
                openFunctionDlg: function (functiontype)
                {
                    var context = this;

                    var id = 0;
                    var metacode = "";
                    var title = "";
                    var actionPath = "";
                    var actionUserInterfaceMetaCode = "";
                    var isModalAction = false;
                    var propertylist = [];
                    if (context.hasFunction(functiontype))
                    {
                        var func = context.getFunction(functiontype);
                        id = func.id;
                        metacode = func.metacode;
                        propertylist = func.propertylist;
                        title = func.title;
                        actionPath = func.actionPath;
                        actionUserInterfaceMetaCode = func.actionUserInterfaceMetaCode;
                        isModalAction = func.isModalAction;
                    }
                   

                    context.functionsettings = {
                        id: id,
                        applicationId:@Model.ApplicationInfo.Id,
                        ownerMetaCode: context.model.metaCode,
                        dlgHeader: "Function Settings",
                        metaType: functiontype,
                        actionPath: actionPath,
                        isModalAction: isModalAction,
                        actionUserInterfaceMetaCode: actionUserInterfaceMetaCode,
                        title: title,
                        dataTableMetaCode: context.model.dataTable.metaCode,
                        metaCode: metacode,
                        propertyList: propertylist,
                        currentProperty: {}
                    };


                    var yesfunc = function () {

                        if (context.functionsettings.metaType == "PAGING")
                            context.functionsettings.title = "Paging";
                        if (context.functionsettings.metaType == "FILTER")
                            context.functionsettings.title = "Filter";

                        if (context.functionsettings.id < 1)
                            context.model.functions.push(context.functionsettings);
                        else
                        {
                            var func = context.getFunction(context.functionsettings.metaType);
                            func.title = context.functionsettings.title;
                            func.actionPath = context.functionsettings.actionPath;
                            func.isModalAction = context.functionsettings.isModalAction;
                            func.actionUserInterfaceMetaCode = context.functionsettings.actionUserInterfaceMetaCode;        
                            func.propertyList = context.functionsettings.propertylist;
                            func.currentProperty= { };
                        }


                    };

                    var delfunc = function ()
                    {
                        var func = context.getFunction(context.functionsettings.metaType);
                        func.isRemoved = true;
                        
                    };

                    context.initializePropertyUI(context.functionsettings);
                    $('#create_edit_function_modal_yesbtn').off('click', yesfunc);
                    $('#create_edit_function_modal_yesbtn').off().on('click', yesfunc);
                    $('#create_edit_function_modal_deletebtn').off('click', delfunc);
                    $('#create_edit_function_modal_deletebtn').off().on('click', delfunc);
                    $("#create_edit_function_modal").modal();


                },
                openColumnDlg: function (column)
                {
                    var context = this;

                    if (column != null)
                    {
                        context.columnsettings = column;
                    }
                    else
                    {
                        context.columnsettings = { id: 0, title: "", parentMetaCode: context.model.metaCode, metaCode: "", metaType: "TEXTLISTCOLUMN", dataColumn1DbName: "" };
                    }

                    var yesfunc = function ()
                    {
                        if (context.columnsettings.id < 1)
                            context.model.table.columns.push(context.columnsettings);
                        else
                        {
                            column.title = context.columnsetting.title;
                            column.dataColumn1DbName = context.columnsetting.dataColumn1DbName;
                        }
                    };

                    var delfunc = function ()
                    {

                        column.isRemoved = true;
                     
                    };

                    context.initializePropertyUI(context.columnsettings);
                    $('#create_edit_column_modal_yesbtn').off('click', yesfunc);
                    $('#create_edit_column_modal_yesbtn').off().on('click', yesfunc);
                    $('#create_edit_column_modal_deletebtn').off('click', delfunc);
                    $('#create_edit_column_modal_deletebtn').off().on('click', delfunc);
                    $("#create_edit_column_modal").modal();


                }



            },
            computed:
            {

               

            },
            mounted: function () {

                var context = this;
                var baseurl = '@Url.Content("~/Model/API/")';
                var endpointurl = baseurl + "GetApplicationListUI/@Model.ApplicationInfo.Id/@Model.MetaCode";
                $.get(endpointurl, function (response) {
                    context.model = response;
                });
           
            }
        });

    </script>
}
