

@{
    ViewData["Title"] = "Add / Edit Value Domains";
}



<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>Value domains</h2></div>
        <div class="card-body">Value domains is simple lists of value pairs. Value domains are used in UI controls such as Comboboxes where the user selects one or more values.</div>
    </div>
    <br />
    <br />

    <div class="row">
        <div class="col-lg-6">
            <div class="btn btn-sm btn-secondary" v-on:click="model.showNew=!model.showNew">
                <span class="fa fa-plus"></span> Create new value domain
            </div>
        </div>
        <div class="col-lg-6">
           
        </div>
    </div>
       
      

    <br />
    <br />

    <div class="row">
        <div class="col-lg-4">

            <div v-if="model.showNew">
                <div class="form-group">
                    <label class="control-label">New domain name<span style="color: red"> *</span></label>
                    <input type="text" class="form-control form-control-sm" v-model="model.newDomainName" style="text-transform:uppercase" />
                </div>
            </div>

            <div class="form-group" v-if="!model.showNew">
                <label class="control-label">Domain name<span style="color: red"> *</span></label>
                <select v-model="model.domainName" class="form-control form-control-sm" id="CB">
                    <option v-for="dom in uniquedomains" v-bind:value="dom.domainName">{{dom.domainName}}</option>
                </select>
            </div>

        </div>
        <div class="col-lg-4">
            <div class="btn btn-sm btn-primary" v-on:click="saveChanges" style="margin-top:28px">
                <span class="glyphicon glyphicon-save"></span> Save changes
            </div>
        </div>
        <div class="col-lg-4"></div>
    </div>
   

    <br />
    <br />
    <div>
        <div class="btn btn-sm btn-secondary" v-on:click="addDomainValue">
            <span class="fa fa-plus"></span> Add domain value
        </div>
    </div>
    <br />
    <br />
    <table class="table table">
        <thead>
            <tr>

                <th style="width:30%">Code <span style="color: red"> *</span></th>
                <th style="width:60%">Value <span style="color: red"> *</span></th>
                <th style="width:10%"></th>
            </tr>
        </thead>
        <tbody v-for="entry in filtereddomains">
            <tr>

                <td><input type="text" class="form-control form-control-sm" v-model="entry.code" v-on:input="markChanged(entry)" /></td>
                <td><input type="text" class="form-control form-control-sm" v-model="entry.value" v-on:input="markChanged(entry)" /></td>
                <td><div class="btn btn-sm btn-danger" v-on:click="deleteDomainValue(entry)"><span class="fa fa-remove"></span> Delete</div></td>
            </tr>
        </tbody>
    </table>

</div>

@section Scripts
    {

    <script>

        var app = new Vue({
            el: '#app',
            data:
            {
                model: { showNew:false, newDomainName: "" },
                valuedomains: [],
                idgen: -1
            },
            methods: {

                addDomain: function ()
                {
                    if (!this.model.newDomainName)
                        return;
                    if (this.model.newDomainName == "")
                        return;

                    this.idgen -= 1;
                    this.valuedomains.unshift({ id: this.idgen, domainName: this.model.newDomainName.toUpperCase(), value: "", code: "", metaType: "VALUEDOMAIN", properties: "" });


                    this.model.showNew = !this.model.showNew;
                    this.model.newDomainName = "";
                 
                },
                addDomainValue: function ()
                {
                    if (!this.model.domainName)
                        return;
                    if (this.model.domainName==="")
                        return;

                    this.idgen -= 1;
                    this.valuedomains.unshift({ id: this.idgen, domainName: this.model.domainName, value: "", code: "", metaType: "VALUEDOMAIN", properties: ""  });
                },
                deleteDomainValue: function (entry)
                {
                    var context = this;
                 
                    if (entry.id < 1)
                    {
                        for (var i = 0; i < context.valuedomains.length; i++)
                        {
                            if (context.valuedomains[i].id === entry.id)
                            {
                                context.valuedomains.splice(i, 1);
                                break;
                            }
                        }
                        return;
                    }

                    var yesfunc = function ()
                    {

                        var baseurl = '@Url.Content("~/Model/")';
                        var endpointurl = baseurl + "RemoveValueDomain";


                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(entry),
                            success: function (response) {
                                context.valuedomains = response;
                            },
                            error: function (response) {
                                raiseErrorModal(response.responseJSON);
                            }
                        });
                    }

                    raiseYesNoModal("Delete domain value ?", "Warning if this is the only value in the value domain the entire value domain will be deleted. Continue ?", yesfunc);

                },
                markChanged: function (entry)
                {
                    entry.properties = "CHANGED=TRUE";

                },
                saveChanges: function ()
                {
                    if (this.model.showNew)
                    {
                        this.addDomain();
                    }
                    else
                    {
                        var list = [];
                        var context = this;

                        for (var i = 0; i < this.valuedomains.length; i++)
                        {
                            if (context.valuedomains[i].id < 1 || context.valuedomains[i].properties.indexOf("CHANGED=TRUE") > -1)
                                list.push(context.valuedomains[i]);
                        }

                        var baseurl = '@Url.Content("~/Model/")';
                        var endpointurl = baseurl + "SaveValueDomains";
                  

                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(list),
                            success: function (response)
                            {
                                context.valuedomains = response;
                            },
                            error: function (response)
                            {
                                raiseErrorModal(response.responseJSON);
                            }
                        });
                    }
                }
            },
            computed:
            {
                filtereddomains: function ()
                {
                    var context = this;
                    if (!context.model.domainName)
                        return [];
                    if (context.model.domainName == "")
                        return [];

                    var arr = [];
                    for (var i = 0; i < context.valuedomains.length; i++)
                    {
                        if (context.valuedomains[i].domainName === context.model.domainName ) {
                            arr.push(context.valuedomains[i]);
                        }
                    }
                    
                    return arr;

                },
                uniquedomains: function ()
                {
                 
                    var context = this;
                    var arr = [];
                    for (var i = 0; i < context.valuedomains.length; i++)
                    {
                        var found = false;
                        for (var z = 0; z < arr.length; z++)
                        {
                          
                            if (arr[z].domainName === context.valuedomains[i].domainName)
                            {
                                found = true;
                                break;
                            }
                        }
                        if (!found)
                            arr.push(context.valuedomains[i]);
                    }

                    return arr;

                }

            },
            mounted: function ()
            {

                //Valuedomains
                var context = this;
                var baseurl = '@Url.Content("~/Model/")';
                var endpointurl = baseurl + "GetValueDomains";
                $.get(endpointurl, function (response) {
                    context.valuedomains = response;
                });

            }
        });
    </script>

}