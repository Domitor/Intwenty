

@{
    ViewData["Title"] = "Manage database";
}



    <div id="app">


        <br />
        <br />
        <div class="card">
            <div class="card-header"><h2>Database model designer</h2></div>
            <div class="card-body">Define the data structure for the {{model.title}} application</div>
        </div>

        <br />


        <a asp-action="GetList" asp-controller="Model" role="button" class="btn btn-default"><span class="fa fa-backward"></span> Back to list</a>
        <br />
        <br />

        <h4>Database tables</h4>

        <div>
            <div class="btn btn-secondary" v-on:click="addDbTable">
                <span class="fa fa-plus"></span> Add table
            </div>
            <div class="btn btn-primary" v-on:click="saveApplicationDB" style="float:right">
                <span class="fa fa-save"></span> Save changes
            </div>
        </div>
        <br />
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th style="width:5%">ID</th>
                    <th style="width:27%">Table name <span style="color: red"> *</span></th>
                    <th style="width:55%">Description <span style="color: red"> *</span></th>
                    <th style="width:8%">ID</th>
                </tr>
            </thead>
            <tr v-for="item in model.tables">
                <td>{{item.id}}</td>
                <td><input type="text" class="form-control" v-model="item.dbName" :disabled="item.properties=='DEFAULTTABLE=TRUE'" /></td>
                <td><input type="text" class="form-control" v-model="item.description" :disabled="item.properties=='DEFAULTTABLE=TRUE'" /></td>
                <td></td>
            </tr>
        </table>

        <br />
        <br />

        <h4>Database columns</h4>

        <div>
            <div class="btn btn-secondary" v-on:click="addDbColumn">
                <span class="fa fa-plus"></span> Add column
            </div>
        </div>
        <br />
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th style="width:5%">ID</th>
                    <th style="width:18%">Table name <span style="color: red"> *</span></th>
                    <th style="width:18%">Column name <span style="color: red"> *</span></th>
                    <th style="width:18%">Data type <span style="color: red"> *</span></th>
                    <th style="width:28%">Description</th>
                    <th style="width:8%"></th>
                </tr>
            </thead>
            <tbody v-for="col in model.columns">
                <tr>
                    <td>{{col.id}}</td>
                    <td>
                        <select v-model="col.tableName" class="form-control">
                            <option v-for="tbl in model.tables" v-bind:value="tbl.dbName">{{tbl.dbName}}</option>
                        </select>
                    </td>
                    <td><input type="text" class="form-control" v-model="col.dbName" /></td>
                    <td>
                        <select v-model="col.dataType" class="form-control">
                            <option v-for="tp in datatypes" v-bind:value="tp">{{tp}}</option>
                        </select>
                    </td>
                    <td>
                        <input type="text" class="form-control" v-model="col.description" />
                    </td>
                    <td><div class="btn btn-danger" v-on:click="deleteDbColumn(col)"><span class="fa fa-remove"></span> Delete</div></td>
                </tr>
                <tr>
                    <td colspan="1"></td>
                    <td colspan="5">
                        <label class="control-label" v-if="!col.showSettings"><a href="#" v-on:click="handleSettings(col)">[Settings]</a></label>
                        <label class="control-label" v-if="col.showSettings"><a href="#" v-on:click="handleSettings(col)">[Close]</a></label>
                        <div v-if="col.showSettings">
                            <i>Settings</i>
                            <br />
                            <input type="checkbox" v-model="col.mandatory" /> Mandatory
                            <br />
                            Domain <input type="text" class="form-control" v-model="col.domain" style="width:450px" />
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>



    </div>

@section Scripts
    {
    <script>

        var app = new Vue({
            el: '#app',
            data: {
                model: { tables: [], columns: [] },
                datatypes: [],
                valuedomains: [],
                idgen:-1
            },
            methods:
            {
                handleSettings: function (item)
                {
                    item.showSettings = !item.showSettings;
                    this.$forceUpdate();
                    return false;
                },
                saveApplicationDB: function ()
                {
                    var context = this;
                    var baseurl = '@Url.Content("~/Model/")';
                    var endpointurl = baseurl + "SaveApplicationDB";


                    if (!hasRequiredValues(context.model.tables, ["dbName"]) ||
                       !hasRequiredValues(context.model.columns, ["tableName","dbName","dataType"]))
                    {
                        raiseValidationErrorModal("Can't save since some required fields are missing.");
                        return;
                    }

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        success: function (response)
                        {
                            context.model = response;
                        },
                        error: function (response)
                        {
                            raiseErrorModal(response.responseJSON);
                        }
                    });

                },
                addDbTable: function ()
                {
                    var context = this;
                    context.idgen -= 1;
                    context.model.tables.unshift({ properties: "", metaType: "DATATABLE", properties: "", id: context.idgen });
                },
                addDbColumn: function () {
                    var context = this;
                    context.idgen -= 1;
                    context.model.columns.unshift({ properties: "", metaType: "DATACOLUMN", id: context.idgen, showSettings:false, mandatory: false, domain:"" });
                }
                ,
                deleteDbColumn: function (col)
                {
                    var context = this;
                 
                    if (col.id < 1)
                    {
                        for (var i = 0; i < context.model.columns.length; i++)
                        {
                            if (context.model.columns[i].id === col.id)
                            {
                                context.model.columns.splice(i, 1);
                                break;
                            }
                        }
                        return;
                    }

                    var yesfunc = function ()
                    {

                        var baseurl = '@Url.Content("~/Model/")';
                        var endpointurl = baseurl + "RemoveFromApplicationDB";


                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(col),
                            success: function (response) {
                                context.model = response;
                            },
                            error: function (response) {
                                raiseErrorModal(response.responseJSON);
                            }
                        });
                    }

                    raiseYesNoModal("Delete column ?", "Warning if this column is bound to an UI component, you might break the application. Delete anyway ?", yesfunc);
                   
                }
               
            },
            mounted: function ()
            {
                var context = this;
                var baseurl = '@Url.Content("~/Model/")';
                var endpointurl = baseurl + "GetApplicationDB/@ViewBag.SystemId";
                //Application
                $.get(endpointurl, function (response){
                    context.model = response;
                }).fail(function (response){
                    raiseErrorModal(response.responseJSON);
                });


                //DataTypes
                endpointurl = baseurl + "GetApplicationTableDataTypes";
                $.get(endpointurl, function (response) {
                    context.datatypes = response;
                }).fail(function (response) {
                    raiseErrorModal(response.responseJSON);
                });

              
            }
        })

    </script>
}