@model Intwenty.Model.ApplicationModel

@await Html.PartialAsync("_Modals")

<div id="app">
    <div>

        <br />


        @{
            var pagesize = 20;
            var title = "";
            //var view = Model.UIViews.Find(p => p.IsMetaTypeEditListView);
            Intwenty.Model.UIRendering.UIView view = null;
            if (view != null)
            {
                title = view.LocalizedTitle;
                pagesize = view.PageSize;
            }

        }

        <div class="card">
            <div class="card-header"><h2>@title</h2></div>
            <div class="card-body">

                <ul class="nav">
                    <li class="nav-item">
                        <a asp-action="Create" asp-controller="Application" asp-route-id="@Model.Application.Id" role="button" class="nav-link btn btn-sm btn-outline-secondary" style="margin:10px"><span class="fa fa-plus" style="font-size:large"></span> @Localizer["New", new[] { "" }]</a>
                    </li>
                    <li class="nav-item">
                        <a href="#" v-on:click="exportToExcel()" class="nav-link btn btn-sm btn-outline-secondary" style="margin:10px"><span class="fa fa-file-export" style="color:seagreen; font-size:large"></span> Export</a>
                    </li>
                    @if (Model.HasListView)
                    {
                        <li class="nav-item">
                            <a asp-action="List" asp-controller="Application" asp-route-id="@Model.Application.Id" role="button" class="nav-link btn btn-sm btn-outline-secondary" style="margin:10px">Presentation</a>
                        </li>
                    }
                </ul>

            </div>
        </div>




        <br />
     
        @if (view != null)
        {
            @await Html.PartialAsync("_DefaultEditListView", view);
        }
        else
        {
            <h3>There's no 'edit list' view model defined for this application yet.</h3>
        }



    </div>
</div>

@section Scripts
{
    
    <script>

 
        var app = new Vue({
            el: '#app',
            data: {
                datalist: []
                ,model: { "showFilter": false }
                ,pageInfo: { "applicationId": @Model.Application.Id, "maxCount": 0, "pageSize": 20, "pageNumber": 0, "filterValues": [] }
                ,currentSort: ''
                ,currentSortDir: 'asc'
                ,baseurl: '@Url.Content("~/Application/API/")'
                ,appMainTable: '@Model.Application.DbName'
                ,appId: @Model.Application.Id
            },
            methods:
            {

                getPage: function () {
                    var context = this;
                    var endpointurl = context.baseurl + "GetEditListData";


                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(this.pageInfo),
                        success: function (response) {
                            //DATA
                            context.datalist = JSON.parse(response.data);

                            //UPDATE CURRENT PAGE INFO
                            context.pageInfo = response.listFilter;
                            if (context.pageInfo.filterValues.length === 0)
                                context.addFilterValue();
                        }
                    });
                },
                sortBycolumn: function (s) {
                    //if s == current sort, reverse
                    if (s === this.currentSort) {
                        this.currentSortDir = this.currentSortDir === 'asc' ? 'desc' : 'asc';
                    }
                    this.currentSort = s;
                },
                exportToExcel: function ()
                {
                    var context = this;
                    var args = { "applicationId": context.appId, "maxCount": 0, "pageSize": 2000, "pageNumber": 0, "filterValues": [] }
                    var endpointurl = context.baseurl + "GetEditListData";

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(args),
                        success: function (response) {
                            var data = JSON.parse(response.data);
                            alasql.promise('SELECT * INTO XLSX("download.xlsx",{headers:true}) FROM ?', [data])
                                .then(function (data) {
                                    console.log('Data saved');
                                }).catch(function (err) {
                                    console.log('Error:', err);
                                });
                        }
                    });
                },
                deleteApplication: function (item) {
                    var context = this;
                    var endpointurl = context.baseurl + "Delete";

                    var deleteapp = function () {
                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(item),
                            success: function (response) {

                                if (response.isSuccess) {
                                    window.location.reload(true);
                                }
                                else {
                                    raiseErrorModal(response);
                                }
                            }
                        });
                    };

                    raiseYesNoModal("Delete ?", "This record will be deleted, are you sure ?", deleteapp);
                }
            },
            computed: {

                sortedResults: function () {
                    return this.datalist.sort((a, b) => {
                        let modifier = 1;
                        if (this.currentSortDir === 'desc') modifier = -1;
                        if (a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
                        if (a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
                        return 0;
                    });
                },
                isFirstPage: function () {
                    return (this.pageInfo.pageNumber <= 0);
                },
                isLastPage: function () {
                    return ((this.pageInfo.pageNumber + 1) * this.pageInfo.pageSize) >= this.pageInfo.maxCount;
                }
            },
            mounted: function () {
                var context = this;
                context.getPage();
            }
        });


    </script>



}