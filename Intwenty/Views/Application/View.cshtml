@model Intwenty.Model.ViewModel

@{

    var mainDbName = Model.ApplicationInfo.DbName;
    var applicationId = Model.ApplicationInfo.Id;
    var applicationViewId = Model.Id;
    int instanceid = (int)ViewBag.Id;
    var aftersaveaction = string.Empty;
    var aftersaveactionpath = string.Empty;
}


@await Html.PartialAsync("_Modals")

<br />
<br />

<div id="app">

    <div class="card">
        <div class="card-header"><h2>@Model.LocalizedTitle</h2></div>
        <div class="card-body">

            <p>@Model.Description</p>

            @if (Model.Functions.Count > 0)
            {
                <ul class="nav">
                    @if (Model.HasCreateFunction)
                    {
                        <li class="nav-item">
                            <a href="@Model.CreateFunction.Path" role="button" class="nav-link btn btn-sm btn-outline-secondary" style="margin:10px"><span class="fa fa-plus" style="font-size:large"></span> @Model.CreateFunction.LocalizedTitle</a>
                        </li>
                    }

                    @if (Model.HasNavigateFunction)
                    {
                        <li class="nav-item">
                            <a href="@Model.NavigateFunction.Path" role="button" class="nav-link btn btn-sm btn-outline-secondary" style="margin:10px"><span class="fa fa-plus" style="font-size:large"></span> @Model.NavigateFunction.LocalizedTitle</a>
                        </li>
                    }

                    @if (Model.HasExportFunction)
                    {
                        <li class="nav-item">
                            <button class="nav-link btn btn-sm btn-outline-secondary" type="button" v-on:click="exportToExcel()" style="margin:10px"><span class="fa fa-file-export" style="color:seagreen; font-size:large"></span> @Model.ExportFunction.LocalizedTitle</button>
                        </li>
                    }

                    @if (Model.HasSaveFunction)
                    {
                        <li class="nav-item">
                            <button class="nav-link btn btn-sm btn-outline-primary" type="button" v-on:click="saveApplication()" style="margin:10px"><span class="fa fa-save" style="font-size:large"></span> @Model.SaveFunction.LocalizedTitle</button>
                        </li>

                        aftersaveaction = Model.SaveFunction.GetPropertyValue("AFTERSAVEACTION");
                        if (aftersaveaction == "GOTOLISTVIEW")
                        {
                            aftersaveactionpath = Model.SaveFunction.GetPropertyValue("GOTOLISTVIEWPATH");
                        }
                    }
                </ul>
            }
        </div>
    </div>

    @foreach (var iface in Model.UserInterface)
    {

        if (iface.IsMetaTypeInputInterface)
        {
            @foreach (var sect in iface.Sections)
            {

                <div class="row">

                    @foreach (var pl in sect.LayoutPanels)
                    {

                        <div class="col-md-@(12/sect.LayoutPanels.Count)">

                            @if (pl.UseFieldSet)
                            {
                                @:<fieldset class="intwentypanel">
                                    @:<legend>@pl.LocalizedTitle</legend>
                                }

                            @foreach (var t in pl.Controls)
                            {
                                if (t.IsUIContainerType)
                                {
                                    continue;
                                }
                                if (t.IsUIBindingType && (!t.IsDataColumn1Connected || !t.IsDataTableConnected))
                                {
                                    continue;
                                }
                              
                                if (t.IsMetaTypeTextBox)
                                {
                                    @await Html.PartialAsync("UIControls/_TextBox", t)
                                }

                                if (t.IsMetaTypeNumBox)
                                {
                                    @await Html.PartialAsync("UIControls/_NumBox", t)

                                }

                                if (t.IsMetaTypeDatePicker)
                                {
                                    @await Html.PartialAsync("UIControls/_DatePicker", t)

                                }

                                if (t.IsMetaTypeCheckBox)
                                {
                                    @await Html.PartialAsync("UIControls/_CheckBox", t)

                                }

                                if (t.IsMetaTypeTextArea)
                                {
                                    @await Html.PartialAsync("UIControls/_TextArea", t)

                                }

                                if (t.IsMetaTypeComboBox && t.HasValueDomain)
                                {
                                    @await Html.PartialAsync("UIControls/_ComboBox", t)

                                }

                                if (t.IsMetaTypeImageBox)
                                {
                                    @await Html.PartialAsync("UIControls/_ImageBox", t)

                                }

                                if (t.IsMetaTypeImage)
                                {
                                    @await Html.PartialAsync("UIControls/_Image", t)

                                }

                                if (t.IsMetaTypeEmailBox)
                                {
                                    @await Html.PartialAsync("UIControls/_EmailBox", t)

                                }

                                if (t.IsMetaTypeSearchBox)
                                {
                                    @await Html.PartialAsync("UIControls/_SearchBox", t)

                                }

                                if (t.IsMetaTypeLabel)
                                {
                                    @await Html.PartialAsync("UIControls/_Label", t)

                                }

                                if (t.IsMetaTypeTextBlock)
                                {
                                    @await Html.PartialAsync("UIControls/_TextBlock", t)

                                }

                                if (t.IsMetaTypeMultiSelect)
                                {
                                    @await Html.PartialAsync("UIControls/_MultiSelect", t)

                                }



                            }  <!--FOR CONTROL -->


                            @if (pl.UseFieldSet)
                            {
                            @: </fieldset>
                        }

                        </div> <!--COL PANEL -->


                    }

                </div> <!--ROW SECTION-->

            }


        }

        if (iface.IsMetaTypeListInterface && iface.Table.Id > 0)
        {

            <br />

            @if (Model.HasFilterFunction)
            {

                <div class="row">

                    <div class="col-lg-7">

                        <button v-on:click="model.showFilter=!model.showFilter">
                            <i class="fas fa-search"></i>
                            <span v-if="model.showFilter">Hide Filter</span>
                            <span v-if="!model.showFilter">Show Filter</span>
                        </button>

                        <br />
                        <br />

                        <fieldset style="padding:5px; border:1px solid black; border-radius:4px" v-if="model.showFilter">

                            <div class="row">
                                <div class="col-lg-5"><button type="button" v-on:click="addFilterValue()"><span class="fa fa-plus"></span> Add filter</button></div>
                                <div class="col-lg-5"></div>
                                <div class="col-lg-2"></div>
                            </div>

                            <div class="mt-2"></div>

                            <div class="row" v-for="filteritem in pageInfo.filterValues">

                                <div class="col-lg-5">
                                    <div class="form-group">
                                        <select v-model="filteritem.name" class="form-control form-control-sm" placeholder="Filter">
                                            @{
                                                foreach (var c in iface.Table.Columns)
                                                {
                                                    <option value="@c.DataColumnDbName">@c.LocalizedTitle</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div class="col-lg-5">
                                    <div class="form-group">
                                        <input type="text" class="form-control form-control-sm" v-model="filteritem.value" v-on:blur="runFilter()" placeholder="Value to filter on" />
                                    </div>
                                </div>

                                <div class="col-lg-2">
                                    <button type="button" class="btn btn-sm btn-danger" v-on:click="deleteFilterValue(filteritem)"><i class="fa fa-trash"></i></button>
                                </div>



                            </div>



                        </fieldset>

                    </div>
                    <div class="col-lg-5"></div>

                </div>


            }

            <table class="table table-responsive-sm">
                <thead>
                    <tr>
                        @if (Model.HasDeleteFunction)
                        {
                            <th style="width:5%"></th>
                        }
                        @if (Model.HasEditFunction)
                        {
                            <th style="width:5%"></th>
                        }

                        @{
                            foreach (var c in iface.Table.Columns)
                            {
                                <th v-on:click="sortBycolumn('@c.DataColumnDbName')" style="cursor:pointer">@c.LocalizedTitle <span class="fa fa-sort-alpha-down-alt"></span></th>

                            }
                        }
                    </tr>
                </thead>
                <tr v-for="item in sortedResults">
                    @if (Model.HasDeleteFunction)
                    {
                        <td style="vertical-align:middle"><button class="btn btn-sm btn-danger" v-on:click="deleteApplication(item)"><span class="fas fa-trash" title="Remove"></span></button></td>
                    }
                    @if (Model.HasEditFunction)
                    {
                        <td style="vertical-align:middle"><a v-bind:href="'@Model.EditFunction.Path/' + item.Id" class="btn btn-sm btn-secondary" role="button"><span class="fas fa-edit" title="Edit"></span></a></td>
                    }

                    @{
                        foreach (var c in iface.UIStructure.Where(p => !p.IsRoot))
                        {

                            if (c.IsMetaTypeImage)
                            {
                                <td>
                                    <img v-bind:src="item.@c.DataColumnDbName" width="80" class="rounded" />
                                </td>
                            }
                            else
                            {
                                <td>{{item.@c.DataColumnDbName}}</td>
                            }
                        }

                    }

                </tr>

            </table>

            @if (Model.HasPagingFunction)
            {
                <nav>
                    <ul class="pagination">
                        <li class="page-item" v-bind:class="{ disabled: isFirstPage }"><a class="page-link" href="#" v-on:click="prevpage()">Previous {{pageInfo.pageSize}}</a></li>
                        <li class="page-item" v-bind:class="{ disabled: isLastPage }"><a class="page-link" href="#" v-on:click="nextpage()">Next {{pageInfo.pageSize}}</a></li>
                    </ul>
                </nav>
            }
        }




    }




</div>

@section Scripts
{

    <script>


        var app = new Vue({
            el: '#app',
            data: {
                baseurl: '@Url.Content("~/Application/API/")'
                ,appMainTable: '@mainDbName'
                ,appId: @applicationId
                ,instanceId: @instanceid
                ,datalist: []
                ,model: { showFilter: false,  ['@mainDbName']: {} }
                ,pageInfo: { applicationId: @applicationId, applicationViewId: @applicationViewId, maxCount: 0, pageSize: 20, pageNumber: 0, filterValues: [] }
                ,currentSort: ''
                ,currentSortDir: 'asc'
                ,dataview: []
                ,valuedomains: {}
                ,validation: {}
                ,current_edit_line: {}
                ,dlgFilterColumnName: ""
                ,dlgFilterValue: ""
                ,applicationViewId: @applicationViewId
                ,aftersaveaction:'@aftersaveaction'
                ,aftersaveactionpath: '@aftersaveactionpath'
                ,showDataViewFilter:false
            },
            methods:
            {
                saveApplication: function () {
                    var context = this;
                    var endpointurl = context.baseurl + "Save";

                    context.model[context.appMainTable].ApplicationId = context.appId;
                    context.model[context.appMainTable].ApplicationViewId = context.applicationViewId;

                    if (!context.canSave())
                        return;

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(this.model),
                        success: function (response) {
                            if (response.isSuccess)
                            {
                                if (context.aftersaveaction == 'GOTOLISTVIEW' && context.aftersaveactionpath != '')
                                {
                                   endpointurl = '@Url.Content("~/" + aftersaveactionpath)';
                                   window.location.href = endpointurl;
                                }
                                else if (context.aftersaveaction == 'REFRESH')
                                {
                                    window.location.reload(true);
                                }

                            }
                            else {
                                raiseErrorModal(response);
                            }
                        }
                    });
                },
                onImageChanged: function (event)
                {
                    this.uploadImage(event);
                },
                getPage: function ()
                {
                    var context = this;
                    var endpointurl = context.baseurl + "GetPagedList";

                    this.pageInfo.applicationViewId = context.applicationViewId;

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(this.pageInfo),
                        success: function (response) {
                            //DATA
                            context.datalist = JSON.parse(response.data);

                            //UPDATE CURRENT PAGE INFO
                            context.pageInfo = response.listFilter;
                            if (context.pageInfo.filterValues.length === 0)
                                context.addFilterValue();
                        }
                    });
                },
                sortBycolumn: function (s) {
                    //if s == current sort, reverse
                    if (s === this.currentSort) {
                        this.currentSortDir = this.currentSortDir === 'asc' ? 'desc' : 'asc';
                    }
                    this.currentSort = s;
                },
                exportToExcel: function ()
                {
                    var context = this;
                    var args = { "applicationId": context.appId, "maxCount": 0, "pageSize": 2000, "pageNumber": 0, "filterValues": [] }
                    var endpointurl = context.baseurl + "GetEditListData";

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(args),
                        success: function (response) {
                            var data = JSON.parse(response.data);
                            alasql.promise('SELECT * INTO XLSX("download.xlsx",{headers:true}) FROM ?', [data])
                                .then(function (data) {
                                    console.log('Data saved');
                                }).catch(function (err) {
                                    console.log('Error:', err);
                                });
                        }
                    });
                },
                deleteApplication: function (item) {
                    var context = this;
                    var endpointurl = context.baseurl + "Delete";

                    var deleteapp = function ()
                    {
                        item.ApplicationId = context.appId;
                        item.ApplicationViewId = context.applicationViewId;

                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(item),
                            success: function (response) {

                                if (response.isSuccess) {
                                    window.location.reload(true);
                                }
                                else {
                                    raiseErrorModal(response);
                                }
                            }
                        });
                    };

                    raiseYesNoModal("Delete ?", "This record will be deleted, are you sure ?", deleteapp);
                }
            },
            computed: {

                sortedResults: function () {
                    return this.datalist.sort((a, b) => {
                        let modifier = 1;
                        if (this.currentSortDir === 'desc') modifier = -1;
                        if (a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
                        if (a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
                        return 0;
                    });
                },
                isFirstPage: function () {
                    return (this.pageInfo.pageNumber <= 0);
                },
                isLastPage: function () {
                    return ((this.pageInfo.pageNumber + 1) * this.pageInfo.pageSize) >= this.pageInfo.maxCount;
                }
            },
            mounted: function () {
                var context = this;
                @if (Model.IsListView())
                {
                    <text>context.getPage();</text>
                }
                else if (Model.IsInputView() && instanceid > 0)
                {
                    <text>
                    var endpointurl = context.baseurl + "GetApplication/" + context.appId + "/" + context.applicationViewId + "/" + context.instanceId;
                    $.get(endpointurl, function (response) {
                        context.model = JSON.parse(response.data);
                        endpointurl = context.baseurl + "GetValueDomains/" + context.appId;
                        $.get(endpointurl, function (response) {
                            context.valuedomains = JSON.parse(response.data);
                        });
                    });
                    </text>
              }
              else if (Model.IsInputView() && instanceid == 0 && Model.CanCreateEntities)
              {
                    <text>
                    var endpointurl = context.baseurl + "GetValueDomains/" + context.appId;
                    $.get(endpointurl, function (response) {
                        context.valuedomains = JSON.parse(response.data);
                        endpointurl = context.baseurl + "CreateNew/" + context.appId;
                        $.get(endpointurl, function (response)
                        {
                            context.model = JSON.parse(response.data);
                        });
                     });
                    </text>

              }

            }
        });


    </script>

}