@model Intwenty.Model.ViewModel

@{

    var mainDbName = Model.ApplicationInfo.DbName;
    var subTableDbNames = new List<string>();
    var applicationId = Model.ApplicationInfo.Id;
    var applicationViewId = Model.Id;
    int instanceid = (int)ViewBag.Id;
    var aftersaveaction = string.Empty;
    var aftersaveactionpath = string.Empty;
   


    //WHAT SHOULD HAPPEN WHEN THIS VIEW IS PERSISTED
    if (Model.HasSaveFunction)
    {
        aftersaveaction = Model.SaveFunction.GetPropertyValue("AFTERSAVEACTION");
        if (aftersaveaction == "GOTOLISTVIEW")
        {
            aftersaveactionpath = Model.SaveFunction.GetPropertyValue("GOTOLISTVIEWPATH");
        }
    }
}



<br />
<br />

@await Html.PartialAsync("_Modals")


<div id="app">

    <!-- 1. ADD MODALS AND SOME CONFIG -->
    @foreach (var iface in Model.UserInterface)
    {
        if (iface.IsSubTableUserInterface)
        {
            if (!subTableDbNames.Exists(p => p == iface.DataTableDbName))
            {
             
                subTableDbNames.Add(iface.DataTableDbName);
            }
        }
        @foreach (var mip in iface.ModalInterfaces)
        {
            @await Html.PartialAsync("UISections/_ModalInputInterface", mip)
        }
    }
    

    <!-- 2. RENDER THE VIEW HEADER -->
    @await Html.PartialAsync("UISections/_ApplicationViewHeader", Model)


    <br />

    <!-- 3. AFTER SAVE MESSAGE -->
    <div class="alert alert-success alert-dismissible fade show" role="alert" id="savealert" v-if="modelSaved">
        <strong>@Localizer["Changes Saved"] !</strong><br />
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>


    @foreach (var iface in Model.UserInterface)
    {
        iface.CurrentRenderContext = CurrentRenderContextOptions.View;

        <!-- 4. RENDER APPLICATION LISTVIEW -->
        if (iface.IsMetaTypeListInterface && iface.Table.Id > 0 && iface.IsMainApplicationTableInterface && Model.IsApplicationListView())
        {
            @await Html.PartialAsync("UISections/_MainTableListInterface", iface)
        }

        <!-- 5. RENDER APPLICATION ONPAGE INPUT INTERFACES -->
        if (iface.IsMetaTypeInputInterface && iface.IsMainApplicationTableInterface && Model.IsApplicationInputView())
        {
            @await Html.PartialAsync("UISections/_InputInterface", iface)
        }

        <!-- 6. RENDER APPLICATION ONPAGE SUBTABLE INTERFACES -->
        if (iface.IsMetaTypeListInterface && iface.Table.Id > 0 && iface.IsSubTableUserInterface && Model.IsApplicationInputView())
        {
            @await Html.PartialAsync("UISections/_SubTableListInterface", iface)
        }



    }


</div>

@section Scripts
{

    <script>

        var modalapps = [];

        var app = new Vue({
            el: '#app',
            data: {
                baseurl: '@Url.Content("~/Application/API/")'
                ,appMainTable: '@mainDbName'
                ,appId: @applicationId
                ,applicationViewId: @applicationViewId
                ,instanceId: @instanceid
                ,applist: []
                ,model: {  ['@mainDbName']: {} }
                ,validation: {}
                ,aftersaveaction:'@aftersaveaction'
                ,aftersaveactionpath: '@aftersaveactionpath'
                ,modelSaved: false
                ,idgen:-1
            },
            methods:
            {

                initApp: function ()
                {
                    var context = this;
                    context.model_settings = { showModel: true, currentSort:"", currentSortDir:""};
                    context.model_pageInfo = { applicationId: "+ applicationId + ", applicationViewId: "+ applicationViewId + ", maxCount: 0, pageSize: 20, pageNumber: 0, filterValues: [] };


                    @foreach (var s in subTableDbNames)
                    {
                        <text>
                            context.@Html.Raw(s)_line = {};
                            context.@Html.Raw(s)_settings = { showModel: true, currentSort: "", currentSortDir: "" };
                            context.@Html.Raw(s)_pageInfo = { applicationId: "+ applicationId + ", applicationViewId: "+ applicationViewId + ", maxCount: 0, pageSize: 20, pageNumber: 0, filterValues: [] };
                        </text>

                    }
                },
                openApplicationModal: function (item, uimetacode)
                {
                    var context = this;


                    var savefunc = function ()
                    {
                        var saveendpoint = context.baseurl + "Save";
                        context.model[context.appMainTable].ApplicationId = context.appId;
                        context.model[context.appMainTable].ApplicationViewId = context.applicationViewId;

                        $.ajax({
                            url: saveendpoint,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(context.model),
                            success: function (response)
                            {
                                @if (Model.IsApplicationListView())
                                {
                                    <text>
                                    context.modelSaved = true;
                                    context.getPage();
                                    setTimeout(function () { context.modelSaved = false; }, 3000);
                                    </text>
                                }
                            },
                            error: function (response)
                            {
                                raiseErrorModal(response);
                            }
                        });
                    };


                    if (item)
                    {
                         context.model[context.appMainTable] = {};
                         context.model[context.appMainTable] = item;
                        $('#addEditModalSaveBtn_' + uimetacode).off('click', savefunc);
                        $('#addEditModalSaveBtn_' + uimetacode).off().on('click', savefunc);
                        $('#addEditModal_' + uimetacode).modal();

                    }
                    else
                    {

                        var endpointurl = context.baseurl + "CreateNew/" + context.appId;
                        $.get(endpointurl, function (response)
                        {
                            context.model = JSON.parse(response.data);

                        }).done(function (){
                            $('#addEditModalSaveBtn_' + uimetacode).off('click', savefunc);
                            $('#addEditModalSaveBtn_' + uimetacode).off().on('click', savefunc);
                            $('#addEditModal_' + uimetacode).modal();

                        });
                    }



                },
                openSubTableModal: function (item, uimetacode, dbtablename)
                {
                    var context = this;

                    var lineobjectname = dbtablename + "_line";

                    var addLine = function ()
                    {
                        context.idgen--;
                        context.model[dbtablename].Id = 0;
                        context[lineobjectname].LocalId = context.idgen;
                        context[lineobjectname].ApplicationId = context.applicationId;
                        context.model[dbtablename].push(context[lineobjectname]);
                    };


                    if (item) {
                        context[lineobjectname] = { [dbtablename]: {} };
                        context[lineobjectname] = { [dbtablename]: item };
                        $('#addEditModal_' + uimetacode).modal();

                    }
                    else {
                        context[lineobjectname] = { [dbtablename]: {} };
                        $('#addEditModalSaveBtn_' + uimetacode).off('click', addLine);
                        $('#addEditModalSaveBtn_' + uimetacode).off().on('click', addLine);
                        $('#addEditModal_' + uimetacode).modal();
                    }
                },
                deleteTableLine: function (item, dbtablename)
                {
                    var context = this;

                    var lineobjectname = dbtablename + "_line";

                    var endpointurl = context.baseurl + "DeleteTableLine";

                    var deletelinefunc = function ()
                    {
                        for (var i = 0; i < context.model[dbtablename].length; i++) {
                            var lineitem = context.model[dbtablename][i];
                            if (lineitem.Id > 0 && item.Id > 0 && lineitem.Id === item.Id) {

                                var senddata = { Id: item.Id, ParentId: context.model[context.appMainTable].Id, TableName: dbtablename, ApplicationId: context.appId, ApplicationViewId: context.applicationViewId };

                                $.ajax({
                                    url: endpointurl,
                                    type: "POST",
                                    contentType: "application/json",
                                    data: JSON.stringify(senddata),
                                    success: function (response) {
                                        if (response.isSuccess) {
                                            context.model[dbtablename].splice(i, 1);

                                        }
                                    },
                                    error: function (response) {
                                        raiseErrorModal(response);
                                    }
                                });

                                break;
                            }
                            else {
                                if (item.hasOwnProperty("LocalId") && lineitem.hasOwnProperty("LocalId")) {
                                    if (lineitem.LocalId === item.LocalId) {
                                        context.model[dbtablename].splice(i, 1);
                                        break;
                                    }
                                }
                            }
                        }
                    };

                    raiseYesNoModal("Delete ?", "This record will be deleted, are you sure ?", deletelinefunc);

                },
                saveApplication: function () {
                    var context = this;
                    var endpointurl = context.baseurl + "Save";

                    context.model[context.appMainTable].ApplicationId = context.appId;
                    context.model[context.appMainTable].ApplicationViewId = context.applicationViewId;

                    if (!context.canSave())
                        return;

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(this.model),
                        success: function (response)
                        {
                            if (response.isSuccess)
                            {
                                if (context.aftersaveaction == 'GOTOLISTVIEW' && context.aftersaveactionpath != '') {
                                    endpointurl = '@Url.Content("~/" + aftersaveactionpath)';
                                    window.location.href = endpointurl;
                                }
                                else if (context.aftersaveaction == 'REFRESH')
                                {
                                    context.instanceId = response.id;
                                    context.model_settings.modelSaved = true;
                                    context.getApplication();
                                    setTimeout(function () { context.model_settings.modelSaved = false; }, 3000);
                                }

                            }
                        },
                        error: function (response)
                        {
                            raiseErrorModal(response.responseJSON);
                        }
                    });
                },
                onImageChanged: function (event)
                {
                    this.uploadImage(event);
                },
                getPage: function ()
                {
                    var context = this;
                    var endpointurl = context.baseurl + "GetPagedList";

                    this.pageInfo.applicationViewId = context.applicationViewId;

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(this.pageInfo),
                        success: function (response) {
                            //DATA
                            context.applist = JSON.parse(response.data);

                            //UPDATE CURRENT PAGE INFO
                            context.model_pageInfo = response.listFilter;
                            if (context.model_pageInfo.filterValues.length === 0)
                                context.addFilterValue();
                        }
                    });
                },
                exportToExcel: function ()
                {
                    var context = this;
                    var args =  { applicationId: @applicationId, applicationViewId: @applicationViewId, maxCount: 0, pageSize: 20000, pageNumber: 0, filterValues: [], skipPaging:true }
                    var endpointurl = context.baseurl + "GetPagedList";

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(args),
                        success: function (response) {
                            var data = JSON.parse(response.data);
                            alasql.promise('SELECT * INTO XLSX("download.xlsx",{headers:true}) FROM ?', [data])
                                .then(function (data) {
                                    console.log('Data saved');
                                }).catch(function (err) {
                                    console.log('Error:', err);
                                });
                        }
                    });
                },
                deleteApplication: function (item) {
                    var context = this;
                    var endpointurl = context.baseurl + "Delete";

                    var deleteapp = function ()
                    {
                        item.ApplicationId = context.appId;
                        item.ApplicationViewId = context.applicationViewId;

                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(item),
                            success: function (response)
                            {
                                context.getPage();
                            },
                            error: function (response)
                            {
                                raiseErrorModal(response.responseJSON);
                            }
                        });
                    };

                    raiseYesNoModal("Delete ?", "This record will be deleted, are you sure ?", deleteapp);
                },
                getApplication: function ()
                {
                    var context = this;
                    var endpointurl = context.baseurl + "GetApplication/" + context.appId + "/" + context.applicationViewId + "/" + context.instanceId;
                    $.get(endpointurl, function (response) {
                        context.model = JSON.parse(response.data);
                    }).done(function () {
                        context.$forceUpdate();
                    });
                },
                createNewApplication: function ()
                {
                    var context = this;
                    var endpointurl = context.baseurl + "CreateNew/" + context.appId;
                    $.get(endpointurl, function (response) {
                        context.model = JSON.parse(response.data);
                    }).done(function () {
                        //context.setUpControls();
                    });
                },
                isFirstPage: function (dbtablename)
                {
                    var objname = "";
                    if (dbtablename)
                        objname = dbtablename + "_pageInfo";
                    else
                        objname = "model_pageInfo";

                    return (this[objname].pageNumber <= 0);
                },
                isLastPage: function (dbtablename)
                {
                    var objname = "";
                    if (dbtablename)
                        objname = dbtablename + "_pageInfo";
                    else
                        objname = "model_pageInfo";

                    return ((this[objname].pageNumber + 1) * this[objname].pageSize) >= this[objname].maxCount;
                },
                sortBycolumn: function (s, dbtablename)
                {
                    var objname = "";
                    if (dbtablename)
                        objname = dbtablename + "_settings";
                    else
                        objname = "model_settings";

                    //if s == current sort, reverse
                    if (s === this[objname].currentSort) {
                        this[objname].currentSortDir = this[objname].currentSortDir === 'asc' ? 'desc' : 'asc';
                    }
                    this[objname].currentSort = s;
                },
                nextPage: function (dbtablename)
                {
                    var context = this;
                    context.pageInfo.pageNumber++;
                    context.getPage();
                },
                prevPage: function (dbtablename) {
                    var context = this;
                    context.pageInfo.pageNumber--;
                    if (context.pageInfo.pageNumber < 0)
                        context.pageInfo.pageNumber = 0;
                    context.getPage();
                },
                runFilter: function (dbtablename) {
                    var context = this;
                    if (context.pageInfo.filterValues.length > 0)
                        context.getPage();
                },
                addFilterValue: function (dbtablename) {
                    var context = this;
                    context.pageInfo.filterValues.push({ "name": "", "value": "" });
                },
                deleteFilterValue: function (item, dbtablename) {
                    var context = this;
                    for (var i = 0; i < context.pageInfo.filterValues.length; i++) {
                        if (context.pageInfo.filterValues[i].name === item.name) {
                            context.pageInfo.filterValues.splice(i, 1);
                            context.getPage();
                            break;

                        }
                    }
                }

            },
            computed: {

                sortedAppTable: function () {
                    return this.applist.sort((a, b) => {
                        let modifier = 1;
                        if (this.model_settings.currentSortDir === 'desc') modifier = -1;
                        if (a[this.model_settings.currentSort] < b[this.model_settings.currentSort]) return -1 * modifier;
                        if (a[this.model_settings.currentSort] > b[this.model_settings.currentSort]) return 1 * modifier;
                        return 0;
                    });
                }
                @foreach (var s in subTableDbNames)
                {
                    <text>
                    ,sorted_@Html.Raw(s): function()
                      {

                            var lineobjectname = @Html.Raw(s) + "_settings";
                            return this.model.@Html.Raw(s)@@.sort((a, b) => {
                                let modifier = 1;
                                if (this.model_settings.currentSortDir === 'desc') modifier = -1;
                                if (a[this[lineobjectname].currentSort] < b[this[lineobjectname].currentSort]) return -1 * modifier;
                                if (a[this[lineobjectname].currentSort] > b[this[lineobjectname].currentSort]) return 1 * modifier;
                                return 0;
                            });
                        }
                    </text>
            },
            mounted: function () {
                var context = this;
                context.initApp();
                @if (Model.IsApplicationListView())
                {
                    <text>
                        context.getPage();
                    </text>

                }
                else if (Model.IsApplicationInputView() && instanceid > 0)
                {
                    <text>
                        context.getApplication();
                    </text>
              }
              else if (Model.IsApplicationInputView() && instanceid == 0)
              {
                    <text>
                        context.createNewApplication();
                    </text>

              }

            }
        });


    </script>

}
