@model Intwenty.Model.ViewModel

@{

    var mainDbName = Model.ApplicationInfo.DbName;
    var subTableDbNames = new List<string>();
    var applicationId = Model.ApplicationInfo.Id;
    var applicationViewId = Model.Id;
    int instanceid = (int)ViewBag.Id;
    var aftersaveaction = string.Empty;
    var aftersaveactionpath = string.Empty;
    var currentline_object = string.Empty;


    //WHAT SHOULD HAPPEN WHEN THIS VIEW IS PERSISTED
    if (Model.HasSaveFunction)
    {
        aftersaveaction = Model.SaveFunction.GetPropertyValue("AFTERSAVEACTION");
        if (aftersaveaction == "GOTOLISTVIEW")
        {
            aftersaveactionpath = Model.SaveFunction.GetPropertyValue("GOTOLISTVIEWPATH");
        }
    }
}



<br />
<br />

@await Html.PartialAsync("_Modals")


<div id="app">

    <!-- 1. ADD MODALS AND SOME CONFIG -->
    @{currentline_object = "{";}
    @foreach (var iface in Model.UserInterface)
    {
        if (iface.IsSubTableUserInterface)
        {
            if (!subTableDbNames.Exists(p => p == iface.DataTableDbName))
            {
                if (currentline_object != "{") { currentline_object += ","; }
                currentline_object += string.Format("{0}:", iface.DataTableDbName) + "{}";
                subTableDbNames.Add(iface.DataTableDbName);
            }
        }
        @foreach (var mip in iface.ModalInterfaces)
        {
            @await Html.PartialAsync("UISections/_ModalInputInterface", mip)
        }
    }
    @{currentline_object += "}";}


    <!-- 2. RENDER THE VIEW HEADER -->
    @await Html.PartialAsync("UISections/_ApplicationViewHeader", Model)


    <br />

    <!-- 3. AFTER SAVE MESSAGE -->
    <div class="alert alert-success alert-dismissible fade show" role="alert" id="savealert" v-if="modelSaved">
        <strong>@Localizer["Changes Saved"] !</strong><br />
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>


    @foreach (var iface in Model.UserInterface)
    {
        iface.CurrentRenderContext = CurrentRenderContextOptions.View;

        <!-- 4. RENDER APPLICATION LISTVIEW -->
        if (iface.IsMetaTypeListInterface && iface.Table.Id > 0 && iface.IsMainApplicationTableInterface && Model.IsApplicationListView())
        {
            @await Html.PartialAsync("UISections/_MainTableListInterface", iface)
        }

        <!-- 5. RENDER APPLICATION ONPAGE INPUT INTERFACES -->
        if (iface.IsMetaTypeInputInterface && iface.IsMainApplicationTableInterface && Model.IsApplicationInputView())
        {
            @await Html.PartialAsync("UISections/_InputInterface", iface)
        }

        <!-- 6. RENDER APPLICATION ONPAGE SUBTABLE INTERFACES -->
        if (iface.IsMetaTypeListInterface && iface.Table.Id > 0 && iface.IsSubTableUserInterface && Model.IsApplicationInputView())
        {
            @await Html.PartialAsync("UISections/_SubTableListInterface", iface)
        }



    }


</div>

@section Scripts
{

    <script>

        var modalapps = [];

        var app = new Vue({
            el: '#app',
            data: {
                baseurl: '@Url.Content("~/Application/API/")'
                ,appMainTable: '@mainDbName'
                ,appId: @applicationId
                ,applicationViewId: @applicationViewId
                ,instanceId: @instanceid
                ,applist: []
                ,model: { showFilter: false, ['@mainDbName']: {} }
                ,currentline: @Html.Raw(currentline_object)
                ,pageInfo: { applicationId: @applicationId, applicationViewId: @applicationViewId, maxCount: 0, pageSize: 20, pageNumber: 0, filterValues: [] }
                ,currentSort: ''
                ,currentSortDir: 'asc'
                ,validation: {}
                ,aftersaveaction:'@aftersaveaction'
                ,aftersaveactionpath: '@aftersaveactionpath'
                ,modelSaved: false
            },
            methods:
            {


                openApplicationModal: function (item, uimetacode)
                {
                    var context = this;


                    var savefunc = function ()
                    {
                        var saveendpoint = context.baseurl + "Save";
                        context.model[context.appMainTable].ApplicationId = context.appId;
                        context.model[context.appMainTable].ApplicationViewId = context.applicationViewId;

                        $.ajax({
                            url: saveendpoint,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(context.model),
                            success: function (response)
                            {
                                @if (Model.IsApplicationListView())
                                {
                                        <text>
                                    context.modelSaved = true;
                                    context.getPage();
                                    setTimeout(function () { context.modelSaved = false; }, 3000);
                                    </text>
                                }
                            },
                            error: function (response)
                            {
                                raiseErrorModal(response);
                            }
                        });
                    };


                    if (item)
                    {
                         context.model[context.appMainTable] = {};
                         context.model[context.appMainTable] = item;
                        $('#addEditModalSaveBtn_' + uimetacode).off('click', savefunc);
                        $('#addEditModalSaveBtn_' + uimetacode).off().on('click', savefunc);
                        $('#addEditModal_' + uimetacode).modal();

                    }
                    else
                    {

                        var endpointurl = context.baseurl + "CreateNew/" + context.appId;
                        $.get(endpointurl, function (response)
                        {
                            context.model = JSON.parse(response.data);

                        }).done(function (){
                            $('#addEditModalSaveBtn_' + uimetacode).off('click', savefunc);
                            $('#addEditModalSaveBtn_' + uimetacode).off().on('click', savefunc);
                            $('#addEditModal_' + uimetacode).modal();

                        });
                    }



                },
                openSubTableModal: function (item, uimetacode, dbtablename)
                {
                     var context = this;

                    var savefunc = function ()
                    {
                        context.model[dbtablename].push(context.currentline[dbtablename]);
                    };


                    if (item)
                    {
                        context.currentline = {[dbtablename]: {} };
                        context.currentline = {[dbtablename]: item };

                        $('#addEditModalSaveBtn_' + uimetacode).off('click', savefunc);
                        $('#addEditModalSaveBtn_' + uimetacode).off().on('click', savefunc);
                        $('#addEditModal_' + uimetacode).modal();

                    }
                    else
                    {
                        context.currentline = { [dbtablename]: {} };
                        $('#addEditModalSaveBtn_' + uimetacode).off('click', savefunc);
                        $('#addEditModalSaveBtn_' + uimetacode).off().on('click', savefunc);
                        $('#addEditModal_' + uimetacode).modal();
                    }
                },
                saveApplication: function () {
                    var context = this;
                    var endpointurl = context.baseurl + "Save";

                    context.model[context.appMainTable].ApplicationId = context.appId;
                    context.model[context.appMainTable].ApplicationViewId = context.applicationViewId;

                    if (!context.canSave())
                        return;

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(this.model),
                        success: function (response)
                        {
                            if (response.isSuccess)
                            {
                                if (context.aftersaveaction == 'GOTOLISTVIEW' && context.aftersaveactionpath != '') {
                                    endpointurl = '@Url.Content("~/" + aftersaveactionpath)';
                                    window.location.href = endpointurl;
                                }
                                else if (context.aftersaveaction == 'REFRESH')
                                {
                                    context.instanceId = response.id;
                                    context.modelSaved = true;
                                    context.getApplication();
                                    setTimeout(function () { context.modelSaved = false; }, 3000);
                                }

                            }
                        },
                        error: function (response)
                        {
                            raiseErrorModal(response);
                        }
                    });
                },
                onImageChanged: function (event)
                {
                    this.uploadImage(event);
                },
                getPage: function ()
                {
                    var context = this;
                    var endpointurl = context.baseurl + "GetPagedList";

                    this.pageInfo.applicationViewId = context.applicationViewId;

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(this.pageInfo),
                        success: function (response) {
                            //DATA
                            context.applist = JSON.parse(response.data);

                            //UPDATE CURRENT PAGE INFO
                            context.pageInfo = response.listFilter;
                            if (context.pageInfo.filterValues.length === 0)
                                context.addFilterValue();
                        }
                    });
                },
                sortBycolumn: function (s) {
                    //if s == current sort, reverse
                    if (s === this.currentSort) {
                        this.currentSortDir = this.currentSortDir === 'asc' ? 'desc' : 'asc';
                    }
                    this.currentSort = s;
                },
                exportToExcel: function ()
                {
                    var context = this;
                    var args =  { applicationId: @applicationId, applicationViewId: @applicationViewId, maxCount: 0, pageSize: 20000, pageNumber: 0, filterValues: [], skipPaging:true }
                    var endpointurl = context.baseurl + "GetPagedList";

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(args),
                        success: function (response) {
                            var data = JSON.parse(response.data);
                            alasql.promise('SELECT * INTO XLSX("download.xlsx",{headers:true}) FROM ?', [data])
                                .then(function (data) {
                                    console.log('Data saved');
                                }).catch(function (err) {
                                    console.log('Error:', err);
                                });
                        }
                    });
                },
                deleteApplication: function (item) {
                    var context = this;
                    var endpointurl = context.baseurl + "Delete";

                    var deleteapp = function ()
                    {
                        item.ApplicationId = context.appId;
                        item.ApplicationViewId = context.applicationViewId;

                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(item),
                            success: function (response)
                            {
                                context.getPage();
                            },
                            error: function (response)
                            {
                                raiseErrorModal(response);
                            }
                        });
                    };

                    raiseYesNoModal("Delete ?", "This record will be deleted, are you sure ?", deleteapp);
                },
                getApplication: function ()
                {
                    var context = this;
                    var endpointurl = context.baseurl + "GetApplication/" + context.appId + "/" + context.applicationViewId + "/" + context.instanceId;
                    $.get(endpointurl, function (response) {
                        context.model = JSON.parse(response.data);
                    }).done(function () {
                        context.$forceUpdate();
                    });
                },
                createNewApplication: function ()
                {
                    var context = this;
                    var endpointurl = context.baseurl + "CreateNew/" + context.appId;
                    $.get(endpointurl, function (response) {
                        context.model = JSON.parse(response.data);
                    }).done(function () {
                        //context.setUpControls();
                    });
                }
            },
            computed: {

                sortedResults: function () {
                    return this.applist.sort((a, b) => {
                        let modifier = 1;
                        if (this.currentSortDir === 'desc') modifier = -1;
                        if (a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
                        if (a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
                        return 0;
                    });
                },
                isFirstPage: function () {
                    return (this.pageInfo.pageNumber <= 0);
                },
                isLastPage: function () {
                    return ((this.pageInfo.pageNumber + 1) * this.pageInfo.pageSize) >= this.pageInfo.maxCount;
                }
            },
            mounted: function () {
                var context = this;
                @if (Model.IsApplicationListView())
                {
                    <text>
                        context.getPage();
                    </text>

                }
                else if (Model.IsApplicationInputView() && instanceid > 0)
                {
                    <text>
                        context.getApplication();
                    </text>
              }
              else if (Model.IsApplicationInputView() && instanceid == 0)
              {
                    <text>
                        context.createNewApplication();
                    </text>

              }

            }
        });


    </script>

}
