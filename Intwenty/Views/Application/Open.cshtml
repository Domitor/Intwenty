@model Moley.Data.Dto.ApplicationDto

@{
    ViewData["Title"] = "Edit "  + Model.Application.Title + " (" + ViewBag.SystemId + ")";
}




@await Html.PartialAsync("_DefaultAppUI", Model)



@section Scripts
    {
<script>
        var app = new Vue({
            el: '#app',
            data: {
                dataview: [],
                valuedomains: {},
                model: {},
                viewretrieveinfo: { "applicationId":@Model.Application.Id, "dataViewMetaCode": "", "maxCount": 0, "batchSize": 10, "currentRowNum": 0, "filterField": "", "filterValue": "" }
            },
            methods:
            {
                saveApplication: function ()
                {

                    var baseurl = '@Url.Content("~/Application/")';
                    var endpointurl = baseurl + "Save";

                    this.model.ApplicationId = @Model.Application.Id;

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(this.model),
                        success: function (response) {
                            window.location.reload(true);
                        }
                    });
                },
                setSelectedDataViewValue: function (item, lookupid) {
                    var helper = new IntwentyHelper(this);
                    helper.setSelectedDataViewValue(item, lookupid);
                },
                getDataViewValue: function (viewname, keyfield, lookupid) {
                    var senddata = { "ViewName": viewname, "ApplicationId": @Model.Application.Id, "SearchValue": "" }
                    var baseurl = '@Url.Content("~/Application/")';
                    var endpointurl = baseurl + "GetDataViewValue";

                    var helper = new IntwentyHelper(this, endpointurl);
                    helper.getDataViewValue(keyfield, lookupid, senddata);
                },
                openDataViewLookUp: function (viewname) {
                    if (!viewname)
                        return;

                    this.viewretrieveinfo.dataViewMetaCode = viewname;
                    this.getDataViewLookUpPage();
                    $("#" + viewname).modal();
                },
                nextDataViewLookUpPage: function () {
                    var context = this;
                    context.viewretrieveinfo.currentRowNum += context.viewretrieveinfo.batchSize;
                    context.getDataViewLookUpPage();
                },
                prevDataViewLookUpPage: function () {
                    var context = this;
                    context.viewretrieveinfo.currentRowNum -= context.viewretrieveinfo.batchSize;
                    context.getDataViewLookUpPage();
                },
                getDataViewLookUpPage: function () {
                    var baseurl = '@Url.Content("~/Application/")';
                    var endpointurl = baseurl + "GetDataView";

                    var helper = new IntwentyHelper(this, endpointurl);
                    helper.getDataViewLookUpPage();
                },
                isFirstDataViewPage: function () {
                    return this.listRetrieveInfo.currentRowNum <= 0;
                },
                handleDataViewFilter: function () {
                    var context = this;
                    context.viewretrieveinfo.currentRowNum = 0;
                    context.getDataViewLookUpPage();

                }
            },
            mounted: function ()
            {
                var context = this;
                var baseurl = '@Url.Content("~/Application/")';
                var endpointurl = baseurl + "GetLatestVersion/@Model.Application.Id/@ViewBag.SystemId";

                $.get(endpointurl, function (response) {
                    context.model = JSON.parse(response.data);
                     endpointurl = baseurl + "GetValueDomains/@Model.Application.Id";
                    $.get(endpointurl, function (response) {
                        context.valuedomains = JSON.parse(response.data);
                    });
                });
            }
        })
</script>

}