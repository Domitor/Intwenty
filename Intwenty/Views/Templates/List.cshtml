@model Intwenty.Model.ApplicationModel


@{
    var pagesize = 20;
    var title = "";

}

@await Html.PartialAsync("_Modals")

<div id="app">
    <div>

        <br />



        <div class="card">
            <div class="card-header"><h2>@title</h2></div>
            <div class="card-body">

                <ul class="nav">
                    <li class="nav-item">
                        <a asp-action="Create" asp-controller="Application" asp-route-id="@Model.Application.Id" role="button" class="nav-link btn btn-sm btn-outline-secondary" style="margin:10px"><span class="fa fa-plus" style="font-size:large"></span> @Localizer["New", new[] { "" }]</a>
                    </li>
                    <li class="nav-item">
                        <a href="#" v-on:click="exportToExcel()" class="nav-link btn btn-sm btn-outline-secondary" style="margin:10px"><span class="fa fa-file-export" style="color:seagreen; font-size:large"></span> Export</a>
                    </li>
                </ul>

            </div>
        </div>




        <br />

        <div class="row">

            <div class="col-lg-7">

                <button v-on:click="model.showFilter=!model.showFilter">
                    <i class="fas fa-search"></i>
                    <span v-if="model.showFilter">Show Filter</span>
                    <span v-if="!model.showFilter">Hide Filter</span>
                </button>

                <br />
                <br />

                <fieldset style="padding:5px; border:1px solid black; border-radius:4px" v-if="model.showFilter">

                    <div class="row">
                        <div class="col-lg-5"><button type="button" v-on:click="addFilterValue()"><span class="fa fa-plus"></span> Add filter</button></div>
                        <div class="col-lg-5"></div>
                        <div class="col-lg-2"></div>
                    </div>

                    <div class="mt-2"></div>

                    <div class="row" v-for="filteritem in pageInfo.filterValues">

                        <div class="col-lg-5">
                            <div class="form-group">
                                <select v-model="filteritem.name" class="form-control form-control-sm" placeholder="Filter">
                                    <option value="col1.DataColumnDbName">Column Namn 1</option>
                                    <option value="col2.DataColumnDbName">Column Namn 2</option>
                                </select>
                            </div>
                        </div>

                        <div class="col-lg-5">
                            <div class="form-group">
                                <input type="text" class="form-control form-control-sm" v-model="filteritem.value" v-on:blur="runFilter()" placeholder="Value to filter on" />
                            </div>
                        </div>

                        <div class="col-lg-2">
                            <button type="button" class="btn btn-sm btn-danger" v-on:click="deleteFilterValue(filteritem)"><i class="fa fa-trash"></i></button>
                        </div>



                    </div>



                </fieldset>

            </div>
            <div class="col-lg-5"></div>

        </div>

        <table class="table table-responsive-sm">
            <thead>
                <tr>
                    <th style="width:5%"></th>
                    <th style="width:5%"></th>
                    <th v-on:click="sortBycolumn('Column1')" style="cursor:pointer">Column 1 Title <span class="fa fa-sort-alpha-down-alt"></span></th>
                    <th v-on:click="sortBycolumn('Column2')" style="cursor:pointer">Column 2 Title<span class="fa fa-sort-alpha-down-alt"></span></th>
                </tr>
            </thead>
            <tr v-for="item in sortedResults">
                <td style="vertical-align:middle"><button class="btn btn-sm btn-danger" v-on:click="deleteApplication(item)"><span class="fas fa-trash" title="Remove"></span></button></td>
                <td style="vertical-align:middle"><a v-bind:href="'/MyController/Edit/@Model.Application.Id /' + item.Id" class="btn btn-sm btn-secondary" role="button"><span class="fas fa-edit" title="Edit"></span></a></td>
                <td>{{item.Column1}}</td>
                <td>{{item.Column2}}</td>
            </tr>

        </table>
        <nav>
            <ul class="pagination">
                <li class="page-item" v-bind:class="{ disabled: isFirstPage }"><a class="page-link" href="#" v-on:click="prevpage()">Previous {{pageInfo.pageSize}}</a></li>
                <li class="page-item" v-bind:class="{ disabled: isLastPage }"><a class="page-link" href="#" v-on:click="nextpage()">Next {{pageInfo.pageSize}}</a></li>
            </ul>
        </nav>


    </div>
</div>

@section Scripts
{

    <script>


        var app = new Vue({
            el: '#app',
            data: {
                datalist: []
                ,model: { "showFilter": false }
                ,pageInfo: { "applicationId": @Model.Application.Id, "maxCount": 0, "pageSize": 20, "pageNumber": 0, "filterValues": [] }
                ,currentSort: ''
                ,currentSortDir: 'asc'
                ,baseurl: '@Url.Content("~/Application/API/")'
                ,appMainTable: '@Model.Application.DbName'
                ,appId: @Model.Application.Id
            },
            methods:
            {

                getPage: function () {
                    var context = this;
                    var endpointurl = context.baseurl + "GetEditListData";


                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(this.pageInfo),
                        success: function (response) {
                            //DATA
                            context.datalist = JSON.parse(response.data);

                            //UPDATE CURRENT PAGE INFO
                            context.pageInfo = response.listFilter;
                            if (context.pageInfo.filterValues.length === 0)
                                context.addFilterValue();
                        }
                    });
                },
                sortBycolumn: function (s) {
                    //if s == current sort, reverse
                    if (s === this.currentSort) {
                        this.currentSortDir = this.currentSortDir === 'asc' ? 'desc' : 'asc';
                    }
                    this.currentSort = s;
                },
                exportToExcel: function ()
                {
                    var context = this;
                    var args = { "applicationId": context.appId, "maxCount": 0, "pageSize": 2000, "pageNumber": 0, "filterValues": [] }
                    var endpointurl = context.baseurl + "GetEditListData";

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(args),
                        success: function (response) {
                            var data = JSON.parse(response.data);
                            alasql.promise('SELECT * INTO XLSX("download.xlsx",{headers:true}) FROM ?', [data])
                                .then(function (data) {
                                    console.log('Data saved');
                                }).catch(function (err) {
                                    console.log('Error:', err);
                                });
                        }
                    });
                },
                deleteApplication: function (item) {
                    var context = this;
                    var endpointurl = context.baseurl + "Delete";

                    var deleteapp = function () {
                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(item),
                            success: function (response) {

                                if (response.isSuccess) {
                                    window.location.reload(true);
                                }
                                else {
                                    raiseErrorModal(response);
                                }
                            }
                        });
                    };

                    raiseYesNoModal("Delete ?", "This record will be deleted, are you sure ?", deleteapp);
                }
            },
            computed: {

                sortedResults: function () {
                    return this.datalist.sort((a, b) => {
                        let modifier = 1;
                        if (this.currentSortDir === 'desc') modifier = -1;
                        if (a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
                        if (a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
                        return 0;
                    });
                },
                isFirstPage: function () {
                    return (this.pageInfo.pageNumber <= 0);
                },
                isLastPage: function () {
                    return ((this.pageInfo.pageNumber + 1) * this.pageInfo.pageSize) >= this.pageInfo.maxCount;
                }
            },
            mounted: function () {
                var context = this;
                context.getPage();
            }
        });


    </script>



}