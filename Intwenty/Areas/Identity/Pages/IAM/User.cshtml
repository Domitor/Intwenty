@page "{Id}"
@model UserModel
@{
    ViewData["Title"] = "Edit User";
}

@await Html.PartialAsync("_Modals")


<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>User</h2></div>
        <div class="card-body">
            Manage the user <b>{{model.userName}}</b>
            <br />
            <br />
            <ul class="nav">
                <li class="nav-item">
                    <a asp-area="Identity" asp-page="/IAM/UserList" role="button" class="btn btn-sm btn-outline-secondary"><span class="far fa-hand-point-left" style="font-size:large"></span> Back to list</a>
                </li>
                <li class="nav-item">
                    <button class="btn btn-sm btn-outline-primary" type="button" v-on:click="updateEntity()" style="margin-left:10px"><span class="fa fa-save" style="font-size:large"></span> Save</button>
                </li>
            </ul>
        </div>
    </div>

    <br />

    <div class="alert alert-success alert-dismissible fade show" role="alert" id="savealert" v-if="model.modelSaved">
        <strong>Changes have been saved !</strong><br />
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>





    <br />

    <div class="form-group">
        <label class="control-label">Email<span style="color: red"> *</span></label>
        <input id="tb_email" type="text" class="form-control form-control-sm" v-model="model.email" />
    </div>
    <div class="form-group">
        <label class="control-label">First Name<span style="color: red"> *</span></label>
        <input id="tb_firstname" type="text" class="form-control form-control-sm" v-model="model.firstName" />
    </div>
    <div class="form-group">
        <label class="control-label">Last Name<span style="color: red"> *</span></label>
        <input id="tb_lastname" type="text" class="form-control form-control-sm" v-model="model.lastName" />
    </div>

   
    <div class="form-group">
        <span>
            <b>API Key: </b> {{model.apiKey}}
            <br />
            <br />
            <button class="btn btn-sm btn-outline-primary" type="button" v-on:click="renewAPIKey()"> Create / Renew API Key</button>
        </span>
    </div>


    <br />
    <br />
    <h5>User Products</h5>
    <p><i>Products is added or removed from the user through organization membership</i></p>
    <table class="table table">
        <thead>
            <tr>

                <th style="width:5%"></th>
                <th style="width:25%">Organization</th>
                <th style="width:25%">Product</th>
            </tr>
        </thead>
        <tbody v-for="item in model.userProducts">
            <tr>

                <td><a role="button" class="btn btn-sm btn-secondary" v-bind:href="'/Identity/IAM/UserProduct/@Model.Id/' + item.organizationId + '/' + item.productId" title="Product Setup"><i class="fas fa-cogs"></i></a></td>
                <td>{{item.organizationName}}</td>
                <td>{{item.productName}}</td>

            </tr>
        </tbody>
    </table>


</div>

@section Scripts
    {

    <script>

        var app = new Vue({
            el: '#app',
            data:
            {
                model: {  },
                users: [],
                idgen: -1
            },
            methods:
            {
                updateEntity: function ()
                {
                    var context = this;
                    var baseurl = '@Url.Content("~/Identity/IAM/")';
                    var endpointurl = baseurl + "User/@Model.Id?handler=UpdateEntity";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        headers: {
                            RequestVerificationToken: antiforgerytoken
                        },
                        success: function (response)
                        {
                            context.model = response;
                            context.model.modelSaved = true;
                            setTimeout(function () { context.model.modelSaved = false; }, 3000);
                        },
                        error: function (response)
                        {
                            //raiseErrorModal(response.responseJSON);
                        }
                    });
                },
                renewAPIKey: function ()
                {
                    var context = this;
                    var baseurl = '@Url.Content("~/Identity/IAM/")';
                    var endpointurl = baseurl + "User/@Model.Id?handler=CreateAPIKey";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        headers: {
                            RequestVerificationToken: antiforgerytoken
                        },
                        success: function (response)
                        {
                            context.model = response;
                            context.model.modelSaved = true;
                            setTimeout(function () { context.model.modelSaved = false; }, 3000);
                        },
                        error: function (response)
                        {
                            //raiseErrorModal(response.responseJSON);
                        }
                    });
                }

            },
            computed:
            {
                example: function ()
                {

                }

            },
            mounted: function ()
            {
                var context = this;
                var baseurl = '@Url.Content("~/Identity/IAM/")';
                var endpointurl = baseurl + "User/@Model.Id?handler=Load";
                $.get(endpointurl, function (response)
                {
                    context.model = response;
                });
            }
        });
    </script>

}

