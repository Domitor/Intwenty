@page "{Id}"
@model UserModel
@{
    ViewData["Title"] = "User administration";
}

@await Html.PartialAsync("_Modals")


<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>User</h2></div>
        <div class="card-body">Manage the user <b>{{model.userName}}</b> @Model.Id</div>
    </div>
    <br />
    <br />

    <div class="form-group">
        <label class="control-label">Email<span style="color: red"> *</span></label>
        <input id="tb_email" type="text" class="form-control form-control-sm" v-model="model.email" />
    </div>
    <div class="form-group">
        <label class="control-label">First Name<span style="color: red"> *</span></label>
        <input id="tb_firstname" type="text" class="form-control form-control-sm" v-model="model.firstName" />
    </div>
    <div class="form-group">
        <label class="control-label">Last Name<span style="color: red"> *</span></label>
        <input id="tb_lastname" type="text" class="form-control form-control-sm" v-model="model.lastName" />
    </div>


</div>

@section Scripts
    {

    <script>

        var app = new Vue({
            el: '#app',
            data:
            {
                model: {  },
                users: [],
                idgen: -1
            },
            methods: {

                blockUser: function (entry)
                {
                    var context = this;

                    var yesfunc = function ()
                    {
                        var baseurl = '@Url.Content("~/Identity/IAM/")';
                        var endpointurl = baseurl + "UserList?handler=BlockUser";
                        var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(entry),
                            headers: {
                                RequestVerificationToken: antiforgerytoken
                            },
                            success: function (response) {
                                context.users = response;
                            },
                            error: function (response) {
                                raiseErrorModal(response.responseJSON);
                            }
                        });
                    }

                    raiseYesNoModal("Block user ?", "The user will be blocked, continue ?", yesfunc);

                },
                unblockUser: function (entry)
                {
                    var context = this;

                    var yesfunc = function ()
                    {
                        var baseurl = '@Url.Content("~/Identity/IAM/")';
                        var endpointurl = baseurl + "UserList?handler=UnblockUser";
                        var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(entry),
                            headers: {
                                RequestVerificationToken: antiforgerytoken
                            },
                            success: function (response) {
                                context.users = response;
                            },
                            error: function (response) {
                                raiseErrorModal(response.responseJSON);
                            }
                        });
                    }

                    raiseYesNoModal("Unblock user ?", "The user will gain access again, continue ?", yesfunc);

                },
                resetMFA: function ()
                {
                    var context = this;
                    var yesfunc = function ()
                    {

                        var baseurl = '@Url.Content("~/Identity/IAM/")';
                        var endpointurl = baseurl + "UserList?handler=ResetMFA";
                        var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(entry),
                            headers: {
                                RequestVerificationToken: antiforgerytoken
                            },
                            success: function (response) {
                                context.users = response;
                            },
                            error: function (response) {
                                raiseErrorModal(response.responseJSON);
                            }
                        });
                    }

                    raiseYesNoModal("Reset Twofactor Authentication ?", "Twofactor authentication will be removed from the user. The user can configure it again.", yesfunc);

                },
                editUser: function ()
                {
                    raiseYesNoModal("Not implemented", "Editing user details is not implemented");
                }
               
            },
            computed:
            {
                example: function ()
                {

                }

            },
            mounted: function ()
            {
                var context = this;
                var baseurl = '@Url.Content("~/Identity/IAM/")';
                var endpointurl = baseurl + "User/@Model.Id?handler=Load";
                $.get(endpointurl, function (response)
                {
                    context.model = response;
                });
            }
        });
    </script>

}

