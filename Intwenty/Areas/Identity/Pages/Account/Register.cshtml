@page
@model RegisterModel
@{
    ViewData["Title"] = Localizer["Register"].Value;
}

@await Html.PartialAsync("_Modals")

@if (!Settings.Value.AccountsAllowRegistration)
{
   <br />
   <br />
   <h1>@Localizer["Sorry, registration is closed"]</h1>
    return;
}

<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>@ViewData["Title"]</h2></div>
        <div class="card-body">@Localizer["Create a new account"]</div>
    </div>
    <br />
    <br />

    <div class="row" id="app">

        @if (Settings.Value.UseBankIdLogin)
        {
            <partial name="_RegisterBankId" />

        }
        else if (Settings.Value.UseFrejaEIdLogin)
        {


        }
        else
        {

            @if (Settings.Value.UseLocalLogins)
            {
                <partial name="_RegisterLocal" />
            }


            @if (Settings.Value.UseExternalLogins)
            {
                <partial name="_RegisterLocal" model="Model" />
            }
        }
    </div>

</div>

@section Scripts
    {
  
    <script>

        var app = new Vue({
            el: '#app',
            data:
            {
                model: { resultCode: ""  }

            },
            methods: {

                registerNewLocalUser: function ()
                {


                    var context = this;
                    var baseurl = '@Url.Content("~/Identity/Account/")';
                    var endpointurl = baseurl + "Register?handler=LocalRegistration";
                    var valid = true;
                    @if (Settings.Value.LocalizationMethod == LocalizationMethods.UserLocalization)
                    {
                        <text>
                        if (!context.model.language)
                        {
                            $("#lang").addClass('requiredNotValid');
                            valid = false;
                        }
                        </text>
                    }

                    @if (Settings.Value.AccountsRegistrationRequireName)
                    {
                        <text>
                        if (!context.model.firstName)
                        {
                            $("#firstname").addClass('requiredNotValid');
                            valid = false;
                        }
                        if (!context.model.lastName) {
                            $("#lastname").addClass('requiredNotValid');
                            valid = false;
                        }
                        </text>
                    }

                     @if (!Settings.Value.AccountsUseEmailAsUserName)
                    {
                        <text>
                        if (!context.model.userName)
                        {
                            $("#username").addClass('requiredNotValid');
                            valid = false;
                        }
                        </text>
                    }

                    if (!context.model.email) {
                        $("#email").addClass('requiredNotValid');
                        valid = false;
                    }
                    if (!context.model.password) {
                        $("#password").addClass('requiredNotValid');
                        valid = false;
                    }
                    if (!context.model.confirmPassword) {
                        $("#confpassword").addClass('requiredNotValid');
                        valid = false;
                    }

                    if (context.model.confirmPassword && context.model.password && context.model.confirmPassword != context.model.password)
                    {
                        valid = false;
                    }

                    if (!valid)
                        return;

                    context.model.actionCode = "INIT_REG_LOCAL";

                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        headers: {
                            RequestVerificationToken: antiforgerytoken
                        },
                        success: function (response)
                        {
                            if (response.message != "") {
                                raiseInformationModal("Information", response.message, function () { window.location.href = response.returnUrl; });
                            } else {
                                window.location.href = response.returnUrl;
                            }
                        },
                        error: function (response) {
                             raiseErrorModal(response.responseJSON);
                        }
                    });
                },
                registerNewBankIdUser: function ()
                {
                    //1. Post email and additional info, verify and return inputed info, show this device / other device
                    //2. User post other device / this device
                    //3. If this device
                    //   - Start Auth, and present qr
                    //   - Wait for 1 second and start collect, also pass input data
                    //4. If other device
                    //   - Open bankid and the same time start collect, also pass input data
                    //5. if has account, login otherwise create account and login

                    var context = this;
                    var baseurl = '@Url.Content("~/Identity/Account/")';
                    var endpointurl = baseurl + "Register?handler=InitBankId";
                    var valid = true;
                    @if (Settings.Value.LocalizationMethod == LocalizationMethods.UserLocalization)
                    {
                        <text>
                        if (!context.model.language)
                        {
                            $("#lang").addClass('requiredNotValid');
                            valid = false;
                        }
                        </text>
                    }

                     @if (!Settings.Value.AccountsUseEmailAsUserName)
                    {
                        <text>
                        if (!context.model.userName)
                        {
                            $("#username").addClass('requiredNotValid');
                            valid = false;
                        }
                        </text>
                    }

                    if (!context.model.email) {
                        $("#email").addClass('requiredNotValid');
                        valid = false;
                    }


                    if (!valid)
                        return;

                    context.model.actionCode = "BANKID_INIT_REG";

                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        headers: {
                            RequestVerificationToken: antiforgerytoken
                        },
                        success: function (response)
                        {
                            context.model = response;
                        },
                        error: function (response)
                        {
                            raiseErrorModal(response.responseJSON);
                        }
                    });
                },
                startBankId: function (method)
                {
                    //1. Post email and additional info, verify and return inputed info, show this device / other device
                    //2. User post other device / this device
                    //3. If this device
                    //   - Start Auth, and present qr
                    //   - Wait for 1 second and start collect, also pass input data
                    //4. If other device
                    //   - Open bankid and the same time start collect, also pass input data
                    //5. if has account, login otherwise create account and login

                    var context = this;
                    var baseurl = '@Url.Content("~/Identity/Account/")';
                    var endpointurl = baseurl + "Register?handler=StartBankId";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';


                     context.model.actionCode = method;

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        headers: {
                            RequestVerificationToken: antiforgerytoken
                        },
                        success: function (response)
                        {
                            context.model = response;
                            if (context.model.resultCode =="BANKID_AUTH_QR")
                                setTimeout(function () { context.AuthenticateBankId(); }, 500);
                        },
                        error: function (response)
                        {
                            raiseErrorModal(response.responseJSON);
                        }
                    });
                },
                AuthenticateBankId: function ()
                {

                    var context = this;
                    var baseurl = '@Url.Content("~/Identity/Account/")';
                    var endpointurl = baseurl + "Register?handler=AuthenticateBankId";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';


                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        headers: {
                            RequestVerificationToken: antiforgerytoken
                        },
                        success: function (response)
                        {
                            


                        },
                        error: function (response)
                        {
                            raiseErrorModal(response.responseJSON);
                        }
                    });
                },
                onUserInput: function (event)
                {
                    if (!event)
                        return;

                    var elementId = event.srcElement.id;
                    if (!elementId)
                        return;

                    //Remove requiredNotValid if the input is valid
                    $("[data-required]").each(function () {
                        var required = $(this).data('required');
                        var id = $(this).attr('id');
                        if (required === "True" && id === elementId) {
                            var val = event.srcElement.value;
                            if (val) {
                                if (val.length > 0)
                                    $("#" + elementId).removeClass('requiredNotValid');
                            }
                        }
                    });
                }


            },
            computed:
            {
                passwordsMatch: function ()
                {
                    var context = this;
                    if (context.model.confirmPassword && context.model.password && context.model.confirmPassword != context.model.password)
                        return false;

                    return true;
                }

            },
            mounted: function ()
            {



            }
        });
    </script>

}

