@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

@await Html.PartialAsync("_Modals")

@if (!Settings.Value.AllowUserRegistration)
{
   <br />
   <br />
    <h1>The requested page is not available</h1>

    return;
}

<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>Register</h2></div>
        <div class="card-body">Create a new account</div>
    </div>
    <br />
    <br />

    <div class="row" id="app">

        @if (Settings.Value.UseLocalLogins)
        {
            <div class="col-md-6">

                <section>


                    @if (Settings.Value.LocalizationMethod == LocalizationMethods.UserLocalization)
                    {
                        <div class="form-group">
                            <label>Language</label>
                            <select v-model="model.language" class="form-control" id="lang" v-on:input="onUserInput(event)" data-required="True">
                                @{
                                    foreach (var t in Settings.Value.SupportedLanguages)
                                    {
                                        <option value="@t.Culture">@t.Name</option>
                                    }
                                }
                            </select>
                        </div>
                    }


                    <div class="form-group">
                        <label>Email <span style="color: red"> *</span></label>
                        <input type="email" v-model="model.email" class="form-control" id="email" v-on:input="onUserInput(event)" data-required="True" />
                    </div>
                    <div class="form-group">
                        <label>Password <span style="color: red"> *</span></label>
                        <input v-model="model.password" type="password" class="form-control" id="password" v-on:input="onUserInput(event)" data-required="True" />
                    </div>
                    <div class="form-group">
                        <label>Confirm Password <span style="color: red"> *</span></label>
                        <input v-model="model.confirmPassword" type="password" class="form-control" id="confpassword" v-on:input="onUserInput(event)" data-required="True" />
                    </div>
                    <div v-if="!passwordsMatch" class="alert alert-danger">Passwords must match !</div>
                    <button type="button" class="btn btn-primary" v-on:click="registerNewUser()">Register</button>
                </section>

            </div>
        }


        @if (Settings.Value.UseExternalLogins)
        {
            <div class="col-md-6">
                <section>


                    @{
                        <p></p>

                        <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                            <div class="d-flex flex-wrap">


                                @foreach (var provider in Model.ExternalLogins)
                                {
                                    <div class="p-2">
                                        @if (provider.Name.ToUpper().Contains("FACE"))
                                        {
                                            <button type="submit" class="btn btn-lg btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account"><i class="fab fa-facebook"></i> Log in with @provider.DisplayName</button>

                                        }
                                        @if (provider.Name.ToUpper().Contains("GOOGLE"))
                                        {
                                            <button type="submit" class="btn btn-lg btn-danger" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account"><i class="fab fa-google"></i> Log in with @provider.DisplayName</button>
                                        }
                                    </div>
                                }

                            </div>
                        </form>
                    }

                </section>

            </div>
        }

    </div>

</div>

@section Scripts
    {
  
    <script>

        var app = new Vue({
            el: '#app',
            data:
            {
                model: {  }

            },
            methods: {

                registerNewUser: function ()
                {


                    var context = this;
                    var baseurl = '@Url.Content("~/Identity/Account/")';
                    var endpointurl = baseurl + "Register";
                    var valid = true;
                    @if (Settings.Value.LocalizationMethod == LocalizationMethods.UserLocalization)
                    {
                        <text>
                        if (!context.model.language)
                        {
                            $("#lang").addClass('requiredNotValid');
                            valid = false;
                        }
                        </text>
                    }



                    if (!context.model.email) {
                        $("#email").addClass('requiredNotValid');
                        valid = false;
                    }
                    if (!context.model.password) {
                        $("#password").addClass('requiredNotValid');
                        valid = false;
                    }
                    if (!context.model.confirmPassword) {
                        $("#confpassword").addClass('requiredNotValid');
                        valid = false;
                    }

                    if (context.model.confirmPassword && context.model.password && context.model.confirmPassword != context.model.password)
                    {
                        valid = false;
                    }

                    if (!valid)
                        return;

                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        headers: {
                            RequestVerificationToken: antiforgerytoken
                        },
                        success: function (response)
                        {
                            if (response.message != "") {
                                raiseInformationModal("Information", response.message, function () { window.location.href = response.returnUrl; });
                            } else {
                                window.location.href = response.returnUrl;
                            }



                        },
                        error: function (response) {
                             raiseErrorModal(response.responseJSON);
                        }
                    });
                },
                onUserInput: function (event)
                {
                    if (!event)
                        return;

                    var elementId = event.srcElement.id;
                    if (!elementId)
                        return;

                    //Remove requiredNotValid if the input is valid
                    $("[data-required]").each(function () {
                        var required = $(this).data('required');
                        var id = $(this).attr('id');
                        if (required === "True" && id === elementId) {
                            var val = event.srcElement.value;
                            if (val) {
                                if (val.length > 0)
                                    $("#" + elementId).removeClass('requiredNotValid');
                            }
                        }
                    });
                }


            },
            computed:
            {
                passwordsMatch: function ()
                {
                    var context = this;
                    if (context.model.confirmPassword && context.model.password && context.model.confirmPassword != context.model.password)
                        return false;

                    return true;
                }

            },
            mounted: function ()
            {



            }
        });
    </script>

}

