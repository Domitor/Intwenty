@{
    ViewData["Title"] = "Register";
}

@await Html.PartialAsync("_Modals")


<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>Register</h2></div>
        <div class="card-body">Create a new account</div>
    </div>
    <br />
    <br />

    <div class="row" id="app">
        <div class="col-md-4">
           
                <hr />
          
                @if (Settings.Value.EnableLocalization && Settings.Value.LocalizationMethod == LocalizationMethods.UserLocalization)
                {
                    <div class="form-group">
                        <label>Language</label>
                        <select v-model="model.language" class="form-control" id="lang" v-on:input="onUserInput(event)" data-required="True">
                            @{
                                foreach (var t in Settings.Value.SupportedLanguages)
                                {
                                    <option value="@t.Culture">@t.Name</option>
                                }
                            }
                        </select>
                    </div>
                }

                @if (Settings.Value.EnableUserInvites)
                {

                    <div class="form-group">
                        <label>Account Type<span style="color: red"> *</span></label>
                        <select class="form-control" v-model="model.accountType" id="acctype" v-on:input="onUserInput(event)" data-required="True">
                            <option value="GROUPADMIN">Organization Account</option>
                            <option value="GROUPMEMBER">Member Account</option>
                        </select>
                        <div v-if="model.accountType=='GROUPADMIN'" class="alert alert-primary">This creates an account where you register a new company/group/team and may invite other users to collaborate.</div>
                        <div v-if="model.accountType=='GROUPMEMBER'" class="alert alert-primary">This creates an account where you join an existing company/group/team.</div>
                    </div>

                    <div class="form-group">
                        <label v-if="model.accountType=='GROUPADMIN'">Companyname / Groupname to create <span style="color: red"> *</span></label>
                        <label v-if="model.accountType=='GROUPMEMBER'">Companyname / Groupname to join <span style="color: red"> *</span></label>
                        <input type="text" v-model="model.groupName" class="form-control" id="grpname" v-on:input="onUserInput(event)" data-required="True" />
                    </div>

                  

                }

                <div class="form-group">
                    <label>Email <span style="color: red"> *</span></label>
                    <input type="email" v-model="model.email" class="form-control" id="email" v-on:input="onUserInput(event)" data-required="True" />
                </div>
                <div class="form-group">
                    <label>Password <span style="color: red"> *</span></label>
                    <input v-model="model.password" type="password" class="form-control" id="password" v-on:input="onUserInput(event)" data-required="True" />
                </div>
                <div class="form-group">
                    <label>Confirm Password <span style="color: red"> *</span></label>
                    <input v-model="model.confirmPassword" type="password" class="form-control" id="confpassword" v-on:input="onUserInput(event)" data-required="True" />
                </div>
                <div v-if="!passwordsMatch" class="alert alert-danger">Passwords must match !</div>
                <button type="button" class="btn btn-primary" v-on:click="registerNewUser()">Register</button>
    
        </div>

        @if (Settings.Value.EnableExternalLogins)
        {
            <div class="col-md-6 col-md-offset-2">
                <section>
                    <h4>Use another service to register.</h4>
                    <hr />
                    @{
                        if ((Model.ExternalLogins?.Count ?? 0) == 0)
                        {
                            <div>
                                <p>
                                    There are no external authentication services configured. See <a href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</a>
                                    for details on setting up this ASP.NET application to support logging in via external services.
                                </p>
                            </div>
                        }
                        else
                        {
                            <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                                <div>
                                    <p>
                                        @foreach (var provider in Model.ExternalLogins)
                                        {
                                            <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                        }
                                    </p>
                                </div>
                            </form>
                        }
                    }
                </section>
            </div>
        }
    </div>

  

</div>

@section Scripts
    {

    <script>

        var app = new Vue({
            el: '#app',
            data:
            {
                model: {  }

            },
            methods: {

                registerNewUser: function ()
                {


                    var context = this;
                    var baseurl = '@Url.Content("~/Identity/Account/API/")';
                    var endpointurl = baseurl + "Register";
                    var valid = true;
                    @if (Settings.Value.EnableLocalization)
                    {
                        <text>
                        if (!context.model.language)
                        {
                            $("#lang").addClass('requiredNotValid');
                            valid = false;
                        }
                        </text>
                    }

                    @if (Settings.Value.EnableUserInvites)
                    {
                        <text>
                        if (!context.model.accountType)
                        {
                            $("#acctype").addClass('requiredNotValid');
                            valid = false;
                        }
                        if (!context.model.groupName) {
                            $("#grpname").addClass('requiredNotValid');
                            valid = false;
                        }
                        </text>
                    }

                    if (!context.model.email) {
                        $("#email").addClass('requiredNotValid');
                        valid = false;
                    }
                    if (!context.model.password) {
                        $("#password").addClass('requiredNotValid');
                        valid = false;
                    }
                    if (!context.model.confirmPassword) {
                        $("#confpassword").addClass('requiredNotValid');
                        valid = false;
                    }

                    if (context.model.confirmPassword && context.model.password && context.model.confirmPassword != context.model.password)
                    {
                        valid = false;
                    }

                    if (!valid)
                        return;

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context.model),
                        success: function (response)
                        {
                            window.location.href = response.returnUrl;
                        },
                        error: function (response) {
                             raiseErrorModal(response.responseJSON);
                        }
                    });
                },
                onUserInput: function (event)
                {
                    if (!event)
                        return;

                    var elementId = event.srcElement.id;
                    if (!elementId)
                        return;

                    //Remove requiredNotValid if the input is valid
                    $("[data-required]").each(function () {
                        var required = $(this).data('required');
                        var id = $(this).attr('id');
                        if (required === "True" && id === elementId) {
                            var val = event.srcElement.value;
                            if (val) {
                                if (val.length > 0)
                                    $("#" + elementId).removeClass('requiredNotValid');
                            }
                        }
                    });
                }


            },
            computed:
            {
                passwordsMatch: function ()
                {
                    var context = this;
                    if (context.model.confirmPassword && context.model.password && context.model.confirmPassword != context.model.password)
                        return false;

                    return true;
                }

            },
            mounted: function ()
            {



            }
        });
    </script>

}

