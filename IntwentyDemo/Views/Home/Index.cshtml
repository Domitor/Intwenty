@{
    ViewData["Title"] = "Start";
}

<!--

    <div class="border border-dark" style="margin-top: 100px; padding:20px; border-radius:12px">
        <div style="font-size: 58px">Intwenty</div>
        <div style="font-size: 38px">A metadata based application platform</div>
    </div>
        -->


<div id="app">
    <multislect class="form-control form-control-lg" v-model="model.somefield">
        <option v-for="item in valuedomain" v-bind:value="item.Code">{{item.Value}}</option>
    </multislect>

    <multiselect2 class="form-control form-control-lg" v-bind.sync="model" idfield="somefield2" textfield="sometextfield2">
        <option v-for="item in valuedomain" v-bind:value="item.Code">{{item.Value}}</option>
    </multiselect2>
    {{model}}
</div>





@section Scripts
{

   

    <script>
      

        Vue.component("multislect", {
            props: ["value"],
            template: '<select multiple="multiple"><slot></slot></select>',
            mounted: function () {
                var vm = this;
                var element = $(this.$el);

                element.select2({theme:"classic"}).on("select2:select", function ()
                {
                    var selectionstring = "";
                    var selections = element.val();
                    for (var i = 0; i < selections.length; i++)
                    {
                        if (selectionstring == "")
                            selectionstring += selections[i];
                        else
                            selectionstring += "," + selections[i];
                    }
                        
                    vm.$emit("input", selectionstring);

                }).on("select2:unselect", function ()
                {
                    var selectionstring = "";
                    var selections = element.val();
                    for (var i = 0; i < selections.length; i++) {
                        if (selectionstring == "")
                            selectionstring += selections[i];
                        else
                            selectionstring += "," + selections[i];
                    }

                    vm.$emit("input", selectionstring);
                });

          
            },
            updated: function ()
            {
                if (!this.value)
                    return;

                $(this.$el).val(this.value.split(","));
                $(this.$el).trigger("select2:select");
            },
            watch:
            {
                value: function (value)
                {
                },
                
            },
            destroyed: function ()
            {
                $(this.$el).off().select2("destroy");
            }
        });

        Vue.component("multiselect2", {
            props: ["appmodel,idfield,textfield"],
            template: '<select multiple="multiple"><slot></slot></select>',
            mounted: function () {
                var vm = this;
                var element = $(this.$el);

                element.select2({ theme: "classic" }).on("select2:select", function () {
                    var selectionstring = "";
                    var selections = element.val();
                    for (var i = 0; i < selections.length; i++) {
                        if (selectionstring == "")
                            selectionstring += selections[i];
                        else
                            selectionstring += "," + selections[i];
                    }


                    vm.$attrs[vm.$attrs.idfield]= selectionstring;
                    vm.$attrs[vm.$attrs.textfield] = "ZZZZZZZZZZ";

                    //TODO: HOW TO GET NEW VALUES BCK TO THE CONSUMER, EVENTS ?


                }).on("select2:unselect", function () {
                    var selectionstring = "";
                    var selections = element.val();
                    for (var i = 0; i < selections.length; i++) {
                        if (selectionstring == "")
                            selectionstring += selections[i];
                        else
                            selectionstring += "," + selections[i];
                    }


                });


            },
            updated: function () {
                if (!this[this.idfield])
                    return;

                $(this.$el).val(this[this.idfield].split(","));
                $(this.$el).trigger("select2:select");
            },
            watch:
            {
                value: function (value) {
                },

            },
            destroyed: function () {
                $(this.$el).off().select2("destroy");
            }
        });


        var app = new Vue({
            el: '#app',
            data: {
                model: {
                    somefield: "", sometextfield:"" },
                valuedomain: []
            },
            methods:
            {
                test: function () {



                }

            },
            mounted: function () {
                this.valuedomain = [{ Id: 50, Code: "T1", Value: "Tag 1" }, { Id: 20, Code: "T2", Value: "Tag 2" }, { Id: 65, Code: "T3", Value: "Tag 3" }];
                this.model.somefield = "T2";
                this.model.sometextfield = "Tag 2";
                this.model.somefield2 = "T2";
                this.model.sometextfield2 = "Tag 2";
            }
        })

    </script>

}